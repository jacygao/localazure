//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace CertificateController
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IController
    {

        /// <summary>
        /// List certificates in a specified key vault
        /// </summary>

        /// <remarks>
        /// The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
        /// </remarks>

        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results.</param>

        /// <param name="includePending">Specifies whether to include certificates which are not completely provisioned.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>A response message containing a list of certificates along with a link to the next page of certificates.</returns>

        System.Threading.Tasks.Task<CertificateListResult> GetCertificatesAsync(int? maxresults, bool? includePending, string api_version);

        /// <summary>
        /// Deletes a certificate from a specified key vault.
        /// </summary>

        /// <remarks>
        /// Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The deleted certificate.</returns>

        System.Threading.Tasks.Task<DeletedCertificateBundle> DeleteCertificateAsync(string certificate_name, string api_version);

        /// <summary>
        /// Sets the certificate contacts for the specified key vault.
        /// </summary>

        /// <remarks>
        /// Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </remarks>

        /// <param name="contacts">The contacts for the key vault certificate.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The contacts for the key vault certificate.</returns>

        System.Threading.Tasks.Task<Contacts> SetCertificateContactsAsync(Contacts contacts, string api_version);

        /// <summary>
        /// Lists the certificate contacts for a specified key vault.
        /// </summary>

        /// <remarks>
        /// The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </remarks>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The contacts for the key vault certificate.</returns>

        System.Threading.Tasks.Task<Contacts> GetCertificateContactsAsync(string api_version);

        /// <summary>
        /// Deletes the certificate contacts for a specified key vault.
        /// </summary>

        /// <remarks>
        /// Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
        /// </remarks>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The contacts for the key vault certificate.</returns>

        System.Threading.Tasks.Task<Contacts> DeleteCertificateContactsAsync(string api_version);

        /// <summary>
        /// List certificate issuers for a specified key vault.
        /// </summary>

        /// <remarks>
        /// The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </remarks>

        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>A response message containing a list of certificate issuers in a key vault along with a link to the next page of certificate issuers.</returns>

        System.Threading.Tasks.Task<CertificateIssuerListResult> GetCertificateIssuersAsync(int? maxresults, string api_version);

        /// <summary>
        /// Sets the specified certificate issuer.
        /// </summary>

        /// <remarks>
        /// The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
        /// </remarks>

        /// <param name="issuer_name">The name of the issuer. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information.</param>

        /// <param name="parameter">Certificate issuer set parameter.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The issuer for the key vault certificate.</returns>

        System.Threading.Tasks.Task<IssuerBundle> SetCertificateIssuerAsync(string issuer_name, CertificateIssuerSetParameters parameter, string api_version);

        /// <summary>
        /// Updates the specified certificate issuer.
        /// </summary>

        /// <remarks>
        /// The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
        /// </remarks>

        /// <param name="issuer_name">The name of the issuer.</param>

        /// <param name="parameter">Certificate issuer update parameter.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The issuer for the key vault certificate.</returns>

        System.Threading.Tasks.Task<IssuerBundle> UpdateCertificateIssuerAsync(string issuer_name, CertificateIssuerUpdateParameters parameter, string api_version);

        /// <summary>
        /// Lists the specified certificate issuer.
        /// </summary>

        /// <remarks>
        /// The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </remarks>

        /// <param name="issuer_name">The name of the issuer.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The issuer for the key vault certificate.</returns>

        System.Threading.Tasks.Task<IssuerBundle> GetCertificateIssuerAsync(string issuer_name, string api_version);

        /// <summary>
        /// Deletes the specified certificate issuer.
        /// </summary>

        /// <remarks>
        /// The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
        /// </remarks>

        /// <param name="issuer_name">The name of the issuer.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The issuer for the key vault certificate.</returns>

        System.Threading.Tasks.Task<IssuerBundle> DeleteCertificateIssuerAsync(string issuer_name, string api_version);

        /// <summary>
        /// Creates a new certificate.
        /// </summary>

        /// <remarks>
        /// If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information.</param>

        /// <param name="parameters">The parameters to create a certificate.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>Created certificate bundle.</returns>

        System.Threading.Tasks.Task<CertificateOperation> CreateCertificateAsync(string certificate_name, CertificateCreateParameters parameters, string api_version);

        /// <summary>
        /// Imports a certificate into a specified key vault.
        /// </summary>

        /// <remarks>
        /// Imports an existing valid certificate, containing a private key, into Azure Key Vault. This operation requires the certificates/import permission. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. Key Vault will only accept a key in PKCS#8 format.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information.</param>

        /// <param name="parameters">The parameters to import the certificate.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>Imported certificate bundle to the vault.</returns>

        System.Threading.Tasks.Task<CertificateBundle> ImportCertificateAsync(string certificate_name, CertificateImportParameters parameters, string api_version);

        /// <summary>
        /// List the versions of a certificate.
        /// </summary>

        /// <remarks>
        /// The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate.</param>

        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>A response message containing a list of certificates in the key vault along with a link to the next page of keys.</returns>

        System.Threading.Tasks.Task<CertificateListResult> GetCertificateVersionsAsync(string certificate_name, int? maxresults, string api_version);

        /// <summary>
        /// Lists the policy for a certificate.
        /// </summary>

        /// <remarks>
        /// The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate in a given key vault.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The certificate policy.</returns>

        System.Threading.Tasks.Task<CertificatePolicy> GetCertificatePolicyAsync(string certificate_name, string api_version);

        /// <summary>
        /// Updates the policy for a certificate.
        /// </summary>

        /// <remarks>
        /// Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate in the given vault.</param>

        /// <param name="certificatePolicy">The policy for the certificate.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The certificate policy</returns>

        System.Threading.Tasks.Task<CertificatePolicy> UpdateCertificatePolicyAsync(string certificate_name, CertificatePolicy certificatePolicy, string api_version);

        /// <summary>
        /// Updates the specified attributes associated with the given certificate.
        /// </summary>

        /// <remarks>
        /// The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate in the given key vault.</param>

        /// <param name="certificate_version">The version of the certificate.</param>

        /// <param name="parameters">The parameters for certificate update.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The updated certificate.</returns>

        System.Threading.Tasks.Task<CertificateBundle> UpdateCertificateAsync(string certificate_name, string certificate_version, CertificateUpdateParameters parameters, string api_version);

        /// <summary>
        /// Gets information about a certificate.
        /// </summary>

        /// <remarks>
        /// Gets information about a specific certificate. This operation requires the certificates/get permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate in the given vault.</param>

        /// <param name="certificate_version">The version of the certificate. This URI fragment is optional. If not specified, the latest version of the certificate is returned.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The retrieved certificate.</returns>

        System.Threading.Tasks.Task<CertificateBundle> GetCertificateAsync(string certificate_name, string certificate_version, string api_version);

        /// <summary>
        /// Updates a certificate operation.
        /// </summary>

        /// <remarks>
        /// Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate.</param>

        /// <param name="certificateOperation">The certificate operation response.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>A message containing the certificate operation response.</returns>

        System.Threading.Tasks.Task<CertificateOperation> UpdateCertificateOperationAsync(string certificate_name, CertificateOperationUpdateParameter certificateOperation, string api_version);

        /// <summary>
        /// Gets the creation operation of a certificate.
        /// </summary>

        /// <remarks>
        /// Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The certificate operation response.</returns>

        System.Threading.Tasks.Task<CertificateOperation> GetCertificateOperationAsync(string certificate_name, string api_version);

        /// <summary>
        /// Deletes the creation operation for a specific certificate.
        /// </summary>

        /// <remarks>
        /// Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>A message containing the certificate operation response.</returns>

        System.Threading.Tasks.Task<CertificateOperation> DeleteCertificateOperationAsync(string certificate_name, string api_version);

        /// <summary>
        /// Merges a certificate or a certificate chain with a key pair existing on the server.
        /// </summary>

        /// <remarks>
        /// The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate.</param>

        /// <param name="parameters">The parameters to merge certificate.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>Merged certificate bundle to the vault.</returns>

        System.Threading.Tasks.Task<CertificateBundle> MergeCertificateAsync(string certificate_name, CertificateMergeParameters parameters, string api_version);

        /// <summary>
        /// Backs up the specified certificate.
        /// </summary>

        /// <remarks>
        /// Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The backup blob containing the backed up certificate.</returns>

        System.Threading.Tasks.Task<BackupCertificateResult> BackupCertificateAsync(string certificate_name, string api_version);

        /// <summary>
        /// Restores a backed up certificate to a vault.
        /// </summary>

        /// <remarks>
        /// Restores a backed up certificate, and all its versions, to a vault. This operation requires the certificates/restore permission.
        /// </remarks>

        /// <param name="parameters">The parameters to restore the certificate.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>Restored certificate bundle in the vault.</returns>

        System.Threading.Tasks.Task<CertificateBundle> RestoreCertificateAsync(CertificateRestoreParameters parameters, string api_version);

        /// <summary>
        /// Lists the deleted certificates in the specified vault currently available for recovery.
        /// </summary>

        /// <remarks>
        /// The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
        /// </remarks>

        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results.</param>

        /// <param name="includePending">Specifies whether to include certificates which are not completely provisioned.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>A response message containing a list of deleted certificates in the vault along with a link to the next page of deleted certificates</returns>

        System.Threading.Tasks.Task<DeletedCertificateListResult> GetDeletedCertificatesAsync(int? maxresults, bool? includePending, string api_version);

        /// <summary>
        /// Retrieves information about the specified deleted certificate.
        /// </summary>

        /// <remarks>
        /// The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>A Certificate bundle of the certificate and its attributes</returns>

        System.Threading.Tasks.Task<DeletedCertificateBundle> GetDeletedCertificateAsync(string certificate_name, string api_version);

        /// <summary>
        /// Permanently deletes the specified deleted certificate.
        /// </summary>

        /// <remarks>
        /// The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the certificate</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>No content signaling that the certificate was purged forever.</returns>

        System.Threading.Tasks.Task PurgeDeletedCertificateAsync(string certificate_name, string api_version);

        /// <summary>
        /// Recovers the deleted certificate back to its current version under /certificates.
        /// </summary>

        /// <remarks>
        /// The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.
        /// </remarks>

        /// <param name="certificate_name">The name of the deleted certificate</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>A Certificate bundle of the original certificate and its attributes</returns>

        System.Threading.Tasks.Task<CertificateBundle> RecoverDeletedCertificateAsync(string certificate_name, string api_version);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class Controller : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IController _implementation;

        public Controller(IController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// List certificates in a specified key vault
        /// </summary>
        /// <remarks>
        /// The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
        /// </remarks>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results.</param>
        /// <param name="includePending">Specifies whether to include certificates which are not completely provisioned.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>A response message containing a list of certificates along with a link to the next page of certificates.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("certificates")]
        public System.Threading.Tasks.Task<CertificateListResult> GetCertificates([Microsoft.AspNetCore.Mvc.FromQuery] int? maxresults, [Microsoft.AspNetCore.Mvc.FromQuery] bool? includePending, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetCertificatesAsync(maxresults, includePending, api_version);
        }

        /// <summary>
        /// Deletes a certificate from a specified key vault.
        /// </summary>
        /// <remarks>
        /// Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The deleted certificate.</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("certificates/{certificate-name}")]
        public System.Threading.Tasks.Task<DeletedCertificateBundle> DeleteCertificate(string certificate_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.DeleteCertificateAsync(certificate_name, api_version);
        }

        /// <summary>
        /// Sets the certificate contacts for the specified key vault.
        /// </summary>
        /// <remarks>
        /// Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <param name="contacts">The contacts for the key vault certificate.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The contacts for the key vault certificate.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("certificates/contacts")]
        public System.Threading.Tasks.Task<Contacts> SetCertificateContacts([Microsoft.AspNetCore.Mvc.FromBody] Contacts contacts, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.SetCertificateContactsAsync(contacts, api_version);
        }

        /// <summary>
        /// Lists the certificate contacts for a specified key vault.
        /// </summary>
        /// <remarks>
        /// The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The contacts for the key vault certificate.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("certificates/contacts")]
        public System.Threading.Tasks.Task<Contacts> GetCertificateContacts([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetCertificateContactsAsync(api_version);
        }

        /// <summary>
        /// Deletes the certificate contacts for a specified key vault.
        /// </summary>
        /// <remarks>
        /// Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
        /// </remarks>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The contacts for the key vault certificate.</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("certificates/contacts")]
        public System.Threading.Tasks.Task<Contacts> DeleteCertificateContacts([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.DeleteCertificateContactsAsync(api_version);
        }

        /// <summary>
        /// List certificate issuers for a specified key vault.
        /// </summary>
        /// <remarks>
        /// The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </remarks>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>A response message containing a list of certificate issuers in a key vault along with a link to the next page of certificate issuers.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("certificates/issuers")]
        public System.Threading.Tasks.Task<CertificateIssuerListResult> GetCertificateIssuers([Microsoft.AspNetCore.Mvc.FromQuery] int? maxresults, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetCertificateIssuersAsync(maxresults, api_version);
        }

        /// <summary>
        /// Sets the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
        /// </remarks>
        /// <param name="issuer_name">The name of the issuer. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information.</param>
        /// <param name="parameter">Certificate issuer set parameter.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The issuer for the key vault certificate.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("certificates/issuers/{issuer-name}")]
        public System.Threading.Tasks.Task<IssuerBundle> SetCertificateIssuer(string issuer_name, [Microsoft.AspNetCore.Mvc.FromBody] CertificateIssuerSetParameters parameter, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.SetCertificateIssuerAsync(issuer_name, parameter, api_version);
        }

        /// <summary>
        /// Updates the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
        /// </remarks>
        /// <param name="issuer_name">The name of the issuer.</param>
        /// <param name="parameter">Certificate issuer update parameter.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The issuer for the key vault certificate.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("certificates/issuers/{issuer-name}")]
        public System.Threading.Tasks.Task<IssuerBundle> UpdateCertificateIssuer(string issuer_name, [Microsoft.AspNetCore.Mvc.FromBody] CertificateIssuerUpdateParameters parameter, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.UpdateCertificateIssuerAsync(issuer_name, parameter, api_version);
        }

        /// <summary>
        /// Lists the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
        /// </remarks>
        /// <param name="issuer_name">The name of the issuer.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The issuer for the key vault certificate.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("certificates/issuers/{issuer-name}")]
        public System.Threading.Tasks.Task<IssuerBundle> GetCertificateIssuer(string issuer_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetCertificateIssuerAsync(issuer_name, api_version);
        }

        /// <summary>
        /// Deletes the specified certificate issuer.
        /// </summary>
        /// <remarks>
        /// The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
        /// </remarks>
        /// <param name="issuer_name">The name of the issuer.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The issuer for the key vault certificate.</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("certificates/issuers/{issuer-name}")]
        public System.Threading.Tasks.Task<IssuerBundle> DeleteCertificateIssuer(string issuer_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.DeleteCertificateIssuerAsync(issuer_name, api_version);
        }

        /// <summary>
        /// Creates a new certificate.
        /// </summary>
        /// <remarks>
        /// If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information.</param>
        /// <param name="parameters">The parameters to create a certificate.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>Created certificate bundle.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("certificates/{certificate-name}/create")]
        public System.Threading.Tasks.Task<CertificateOperation> CreateCertificate(string certificate_name, [Microsoft.AspNetCore.Mvc.FromBody] CertificateCreateParameters parameters, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.CreateCertificateAsync(certificate_name, parameters, api_version);
        }

        /// <summary>
        /// Imports a certificate into a specified key vault.
        /// </summary>
        /// <remarks>
        /// Imports an existing valid certificate, containing a private key, into Azure Key Vault. This operation requires the certificates/import permission. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. Key Vault will only accept a key in PKCS#8 format.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information.</param>
        /// <param name="parameters">The parameters to import the certificate.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>Imported certificate bundle to the vault.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("certificates/{certificate-name}/import")]
        public System.Threading.Tasks.Task<CertificateBundle> ImportCertificate(string certificate_name, [Microsoft.AspNetCore.Mvc.FromBody] CertificateImportParameters parameters, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.ImportCertificateAsync(certificate_name, parameters, api_version);
        }

        /// <summary>
        /// List the versions of a certificate.
        /// </summary>
        /// <remarks>
        /// The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>A response message containing a list of certificates in the key vault along with a link to the next page of keys.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("certificates/{certificate-name}/versions")]
        public System.Threading.Tasks.Task<CertificateListResult> GetCertificateVersions(string certificate_name, [Microsoft.AspNetCore.Mvc.FromQuery] int? maxresults, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetCertificateVersionsAsync(certificate_name, maxresults, api_version);
        }

        /// <summary>
        /// Lists the policy for a certificate.
        /// </summary>
        /// <remarks>
        /// The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate in a given key vault.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The certificate policy.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("certificates/{certificate-name}/policy")]
        public System.Threading.Tasks.Task<CertificatePolicy> GetCertificatePolicy(string certificate_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetCertificatePolicyAsync(certificate_name, api_version);
        }

        /// <summary>
        /// Updates the policy for a certificate.
        /// </summary>
        /// <remarks>
        /// Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate in the given vault.</param>
        /// <param name="certificatePolicy">The policy for the certificate.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The certificate policy</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("certificates/{certificate-name}/policy")]
        public System.Threading.Tasks.Task<CertificatePolicy> UpdateCertificatePolicy(string certificate_name, [Microsoft.AspNetCore.Mvc.FromBody] CertificatePolicy certificatePolicy, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.UpdateCertificatePolicyAsync(certificate_name, certificatePolicy, api_version);
        }

        /// <summary>
        /// Updates the specified attributes associated with the given certificate.
        /// </summary>
        /// <remarks>
        /// The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate's attributes. This operation requires the certificates/update permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate in the given key vault.</param>
        /// <param name="certificate_version">The version of the certificate.</param>
        /// <param name="parameters">The parameters for certificate update.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The updated certificate.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("certificates/{certificate-name}/{certificate-version}")]
        public System.Threading.Tasks.Task<CertificateBundle> UpdateCertificate(string certificate_name, string certificate_version, [Microsoft.AspNetCore.Mvc.FromBody] CertificateUpdateParameters parameters, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.UpdateCertificateAsync(certificate_name, certificate_version, parameters, api_version);
        }

        /// <summary>
        /// Gets information about a certificate.
        /// </summary>
        /// <remarks>
        /// Gets information about a specific certificate. This operation requires the certificates/get permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate in the given vault.</param>
        /// <param name="certificate_version">The version of the certificate. This URI fragment is optional. If not specified, the latest version of the certificate is returned.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The retrieved certificate.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("certificates/{certificate_name}/{certificate_version}")]
        public System.Threading.Tasks.Task<CertificateBundle> GetCertificate(string certificate_name, string certificate_version, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetCertificateAsync(certificate_name, certificate_version, api_version);
        }

        /// <summary>
        /// Updates a certificate operation.
        /// </summary>
        /// <remarks>
        /// Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate.</param>
        /// <param name="certificateOperation">The certificate operation response.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>A message containing the certificate operation response.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("certificates/{certificate-name}/pending")]
        public System.Threading.Tasks.Task<CertificateOperation> UpdateCertificateOperation(string certificate_name, [Microsoft.AspNetCore.Mvc.FromBody] CertificateOperationUpdateParameter certificateOperation, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.UpdateCertificateOperationAsync(certificate_name, certificateOperation, api_version);
        }

        /// <summary>
        /// Gets the creation operation of a certificate.
        /// </summary>
        /// <remarks>
        /// Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The certificate operation response.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("certificates/{certificate-name}/pending")]
        public System.Threading.Tasks.Task<CertificateOperation> GetCertificateOperation(string certificate_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetCertificateOperationAsync(certificate_name, api_version);
        }

        /// <summary>
        /// Deletes the creation operation for a specific certificate.
        /// </summary>
        /// <remarks>
        /// Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>A message containing the certificate operation response.</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("certificates/{certificate-name}/pending")]
        public System.Threading.Tasks.Task<CertificateOperation> DeleteCertificateOperation(string certificate_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.DeleteCertificateOperationAsync(certificate_name, api_version);
        }

        /// <summary>
        /// Merges a certificate or a certificate chain with a key pair existing on the server.
        /// </summary>
        /// <remarks>
        /// The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate.</param>
        /// <param name="parameters">The parameters to merge certificate.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>Merged certificate bundle to the vault.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("certificates/{certificate-name}/pending/merge")]
        public System.Threading.Tasks.Task<CertificateBundle> MergeCertificate(string certificate_name, [Microsoft.AspNetCore.Mvc.FromBody] CertificateMergeParameters parameters, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.MergeCertificateAsync(certificate_name, parameters, api_version);
        }

        /// <summary>
        /// Backs up the specified certificate.
        /// </summary>
        /// <remarks>
        /// Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The backup blob containing the backed up certificate.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("certificates/{certificate-name}/backup")]
        public System.Threading.Tasks.Task<BackupCertificateResult> BackupCertificate(string certificate_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.BackupCertificateAsync(certificate_name, api_version);
        }

        /// <summary>
        /// Restores a backed up certificate to a vault.
        /// </summary>
        /// <remarks>
        /// Restores a backed up certificate, and all its versions, to a vault. This operation requires the certificates/restore permission.
        /// </remarks>
        /// <param name="parameters">The parameters to restore the certificate.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>Restored certificate bundle in the vault.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("certificates/restore")]
        public System.Threading.Tasks.Task<CertificateBundle> RestoreCertificate([Microsoft.AspNetCore.Mvc.FromBody] CertificateRestoreParameters parameters, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.RestoreCertificateAsync(parameters, api_version);
        }

        /// <summary>
        /// Lists the deleted certificates in the specified vault currently available for recovery.
        /// </summary>
        /// <remarks>
        /// The GetDeletedCertificates operation retrieves the certificates in the current vault which are in a deleted state and ready for recovery or purging. This operation includes deletion-specific information. This operation requires the certificates/get/list permission. This operation can only be enabled on soft-delete enabled vaults.
        /// </remarks>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results.</param>
        /// <param name="includePending">Specifies whether to include certificates which are not completely provisioned.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>A response message containing a list of deleted certificates in the vault along with a link to the next page of deleted certificates</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("deletedcertificates")]
        public System.Threading.Tasks.Task<DeletedCertificateListResult> GetDeletedCertificates([Microsoft.AspNetCore.Mvc.FromQuery] int? maxresults, [Microsoft.AspNetCore.Mvc.FromQuery] bool? includePending, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetDeletedCertificatesAsync(maxresults, includePending, api_version);
        }

        /// <summary>
        /// Retrieves information about the specified deleted certificate.
        /// </summary>
        /// <remarks>
        /// The GetDeletedCertificate operation retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>A Certificate bundle of the certificate and its attributes</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("deletedcertificates/{certificate-name}")]
        public System.Threading.Tasks.Task<DeletedCertificateBundle> GetDeletedCertificate(string certificate_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetDeletedCertificateAsync(certificate_name, api_version);
        }

        /// <summary>
        /// Permanently deletes the specified deleted certificate.
        /// </summary>
        /// <remarks>
        /// The PurgeDeletedCertificate operation performs an irreversible deletion of the specified certificate, without possibility for recovery. The operation is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the certificate</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>No content signaling that the certificate was purged forever.</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("deletedcertificates/{certificate-name}")]
        public System.Threading.Tasks.Task PurgeDeletedCertificate(string certificate_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.PurgeDeletedCertificateAsync(certificate_name, api_version);
        }

        /// <summary>
        /// Recovers the deleted certificate back to its current version under /certificates.
        /// </summary>
        /// <remarks>
        /// The RecoverDeletedCertificate operation performs the reversal of the Delete operation. The operation is applicable in vaults enabled for soft-delete, and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.
        /// </remarks>
        /// <param name="certificate_name">The name of the deleted certificate</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>A Certificate bundle of the original certificate and its attributes</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("deletedcertificates/{certificate-name}/recover")]
        public System.Threading.Tasks.Task<CertificateBundle> RecoverDeletedCertificate(string certificate_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.RecoverDeletedCertificateAsync(certificate_name, api_version);
        }

    }

    /// <summary>
    /// The certificate management attributes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateAttributes : Attributes
    {
        /// <summary>
        /// softDelete data retention days. Value should be &gt;=7 and &lt;=90 when softDelete enabled, otherwise 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recoverableDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RecoverableDays { get; set; }

        /// <summary>
        /// Reflects the deletion recovery level currently in effect for certificates in the current vault. If it contains 'Purgeable', the certificate can be permanently deleted by a privileged user; otherwise, only the system can purge the certificate, at the end of the retention interval.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recoveryLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CertificateAttributesRecoveryLevel? RecoveryLevel { get; set; }

    }

    /// <summary>
    /// The certificate item containing certificate metadata.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateItem
    {
        /// <summary>
        /// Certificate identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The certificate management attributes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateAttributes Attributes { get; set; }

        /// <summary>
        /// Application specific metadata in the form of key-value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Thumbprint of the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x5t", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string X5t { get; set; }

    }

    /// <summary>
    /// The certificate issuer item containing certificate issuer metadata.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateIssuerItem
    {
        /// <summary>
        /// Certificate Identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The issuer provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Provider { get; set; }

    }

    /// <summary>
    /// A certificate bundle consists of a certificate (X509) plus its attributes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateBundle
    {
        /// <summary>
        /// The certificate id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kid { get; set; }

        /// <summary>
        /// The secret id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sid { get; set; }

        /// <summary>
        /// Thumbprint of the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x5t", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string X5t { get; set; }

        /// <summary>
        /// The management policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificatePolicy Policy { get; set; }

        /// <summary>
        /// CER contents of x509 certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Cer { get; set; }

        /// <summary>
        /// The content type of the secret. eg. 'application/x-pem-file' or 'application/x-pkcs12', 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        /// <summary>
        /// The certificate attributes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateAttributes Attributes { get; set; }

        /// <summary>
        /// Application specific metadata in the form of key-value pairs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

    }

    /// <summary>
    /// A Deleted Certificate consisting of its previous id, attributes and its tags, as well as information on when it will be purged.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeletedCertificateBundle : CertificateBundle
    {
        /// <summary>
        /// The url of the recovery object, used to identify and recover the deleted certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recoveryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecoveryId { get; set; }

        /// <summary>
        /// The time when the certificate is scheduled to be purged, in UTC
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledPurgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ScheduledPurgeDate { get; set; }

        /// <summary>
        /// The time when the certificate was deleted, in UTC
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeletedDate { get; set; }

    }

    /// <summary>
    /// The deleted certificate item containing metadata about the deleted certificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeletedCertificateItem : CertificateItem
    {
        /// <summary>
        /// The url of the recovery object, used to identify and recover the deleted certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recoveryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecoveryId { get; set; }

        /// <summary>
        /// The time when the certificate is scheduled to be purged, in UTC
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledPurgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ScheduledPurgeDate { get; set; }

        /// <summary>
        /// The time when the certificate was deleted, in UTC
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeletedDate { get; set; }

    }

    /// <summary>
    /// A certificate operation is returned in case of asynchronous requests.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateOperation
    {
        /// <summary>
        /// The certificate id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Parameters for the issuer of the X509 component of a certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssuerParameters Issuer { get; set; }

        /// <summary>
        /// The certificate signing request (CSR) that is being used in the certificate operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("csr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Csr { get; set; }

        /// <summary>
        /// Indicates if cancellation was requested on the certificate operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancellation_requested", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Cancellation_requested { get; set; }

        /// <summary>
        /// Status of the certificate operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The status details of the certificate operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status_details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status_details { get; set; }

        /// <summary>
        /// Error encountered, if any, during the certificate operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error Error { get; set; }

        /// <summary>
        /// Location which contains the result of the certificate operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }

        /// <summary>
        /// Identifier for the certificate operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("request_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Request_id { get; set; }

    }

    /// <summary>
    /// Management policy for a certificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificatePolicy
    {
        /// <summary>
        /// The certificate id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Properties of the key backing a certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key_props", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public KeyProperties Key_props { get; set; }

        /// <summary>
        /// Properties of the secret backing a certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secret_props", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SecretProperties Secret_props { get; set; }

        /// <summary>
        /// Properties of the X509 component of a certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x509_props", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public X509CertificateProperties X509_props { get; set; }

        /// <summary>
        /// Actions that will be performed by Key Vault over the lifetime of a certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifetime_actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LifetimeAction> Lifetime_actions { get; set; }

        /// <summary>
        /// Parameters for the issuer of the X509 component of a certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssuerParameters Issuer { get; set; }

        /// <summary>
        /// The certificate attributes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateAttributes Attributes { get; set; }

    }

    /// <summary>
    /// Properties of the X509 component of a certificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class X509CertificateProperties
    {
        /// <summary>
        /// The subject name. Should be a valid X509 distinguished Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subject { get; set; }

        /// <summary>
        /// The enhanced key usage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ekus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Ekus { get; set; }

        /// <summary>
        /// The subject alternative names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sans", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubjectAlternativeNames Sans { get; set; }

        /// <summary>
        /// Defines how the certificate's key may be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key_usage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<Key_usage> Key_usage { get; set; }

        /// <summary>
        /// The duration that the certificate is valid in months.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validity_months", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Validity_months { get; set; }

    }

    /// <summary>
    /// Parameters for the issuer of the X509 component of a certificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssuerParameters
    {
        /// <summary>
        /// Name of the referenced issuer object or reserved names; for example, 'Self' or 'Unknown'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Certificate type as supported by the provider (optional); for example 'OV-SSL', 'EV-SSL'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cty { get; set; }

        /// <summary>
        /// Indicates if the certificates generated under this policy should be published to certificate transparency logs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cert_transparency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Cert_transparency { get; set; }

    }

    /// <summary>
    /// Action and its trigger that will be performed by Key Vault over the lifetime of a certificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LifetimeAction
    {
        /// <summary>
        /// The condition that will execute the action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trigger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Trigger Trigger { get; set; }

        /// <summary>
        /// The action that will be executed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Action Action { get; set; }

    }

    /// <summary>
    /// The action that will be executed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Action
    {
        /// <summary>
        /// The type of the action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Action_type? Action_type { get; set; }

    }

    /// <summary>
    /// A condition to be satisfied for an action to be executed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Trigger
    {
        /// <summary>
        /// Percentage of lifetime at which to trigger. Value should be between 1 and 99.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lifetime_percentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 99)]
        public int? Lifetime_percentage { get; set; }

        /// <summary>
        /// Days before expiry to attempt renewal. Value should be between 1 and validity_in_months multiplied by 27. If validity_in_months is 36, then value should be between 1 and 972 (36 * 27).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("days_before_expiry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Days_before_expiry { get; set; }

    }

    /// <summary>
    /// The subject alternate names of a X509 object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubjectAlternativeNames
    {
        /// <summary>
        /// Email addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Emails { get; set; }

        /// <summary>
        /// Domain names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dns_names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Dns_names { get; set; }

        /// <summary>
        /// User principal names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Upns { get; set; }

    }

    /// <summary>
    /// The issuer for Key Vault certificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssuerBundle
    {
        /// <summary>
        /// Identifier for the issuer object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The issuer provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Provider { get; set; }

        /// <summary>
        /// The credentials to be used for the issuer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssuerCredentials Credentials { get; set; }

        /// <summary>
        /// Details of the organization as provided to the issuer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("org_details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganizationDetails Org_details { get; set; }

        /// <summary>
        /// Attributes of the issuer object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssuerAttributes Attributes { get; set; }

    }

    /// <summary>
    /// The attributes of an issuer managed by the Key Vault service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssuerAttributes
    {
        /// <summary>
        /// Determines whether the issuer is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Creation time in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Created { get; set; }

        /// <summary>
        /// Last updated time in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Updated { get; set; }

    }

    /// <summary>
    /// The credentials to be used for the certificate issuer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IssuerCredentials
    {
        /// <summary>
        /// The user name/account name/account id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Account_id { get; set; }

        /// <summary>
        /// The password/secret/account key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pwd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pwd { get; set; }

    }

    /// <summary>
    /// Details of the organization of the certificate issuer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganizationDetails
    {
        /// <summary>
        /// Id of the organization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Details of the organization administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("admin_details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AdministratorDetails> Admin_details { get; set; }

    }

    /// <summary>
    /// Details of the organization administrator of the certificate issuer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdministratorDetails
    {
        /// <summary>
        /// First name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_name { get; set; }

        /// <summary>
        /// Last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_name { get; set; }

        /// <summary>
        /// Email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

    }

    /// <summary>
    /// The contacts for the vault certificates.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contacts
    {
        /// <summary>
        /// Identifier for the contacts collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The contact list for the vault certificates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Contact> Contacts1 { get; set; }

    }

    /// <summary>
    /// The contact information for the vault certificates.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact
    {
        /// <summary>
        /// Email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

    }

    /// <summary>
    /// The certificate create parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateCreateParameters
    {
        /// <summary>
        /// The management policy for the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificatePolicy Policy { get; set; }

        /// <summary>
        /// The attributes of the certificate (optional).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateAttributes Attributes { get; set; }

        /// <summary>
        /// Application specific metadata in the form of key-value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

    }

    /// <summary>
    /// The certificate import parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateImportParameters
    {
        /// <summary>
        /// Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        /// <summary>
        /// If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pwd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pwd { get; set; }

        /// <summary>
        /// The management policy for the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificatePolicy Policy { get; set; }

        /// <summary>
        /// The attributes of the certificate (optional).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateAttributes Attributes { get; set; }

        /// <summary>
        /// Application specific metadata in the form of key-value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

    }

    /// <summary>
    /// The certificate update parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateUpdateParameters
    {
        /// <summary>
        /// The management policy for the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificatePolicy Policy { get; set; }

        /// <summary>
        /// The attributes of the certificate (optional).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateAttributes Attributes { get; set; }

        /// <summary>
        /// Application specific metadata in the form of key-value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

    }

    /// <summary>
    /// The certificate merge parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateMergeParameters
    {
        /// <summary>
        /// The certificate or the certificate chain to merge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x5c", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<byte[]> X5c { get; set; } = new System.Collections.Generic.List<byte[]>();

        /// <summary>
        /// The attributes of the certificate (optional).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateAttributes Attributes { get; set; }

        /// <summary>
        /// Application specific metadata in the form of key-value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

    }

    /// <summary>
    /// The certificate issuer set parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateIssuerSetParameters
    {
        /// <summary>
        /// The issuer provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Provider { get; set; }

        /// <summary>
        /// The credentials to be used for the issuer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssuerCredentials Credentials { get; set; }

        /// <summary>
        /// Details of the organization as provided to the issuer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("org_details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganizationDetails Org_details { get; set; }

        /// <summary>
        /// Attributes of the issuer object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssuerAttributes Attributes { get; set; }

    }

    /// <summary>
    /// The certificate issuer update parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateIssuerUpdateParameters
    {
        /// <summary>
        /// The issuer provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Provider { get; set; }

        /// <summary>
        /// The credentials to be used for the issuer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssuerCredentials Credentials { get; set; }

        /// <summary>
        /// Details of the organization as provided to the issuer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("org_details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrganizationDetails Org_details { get; set; }

        /// <summary>
        /// Attributes of the issuer object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssuerAttributes Attributes { get; set; }

    }

    /// <summary>
    /// The certificate operation update parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateOperationUpdateParameter
    {
        /// <summary>
        /// Indicates if cancellation was requested on the certificate operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancellation_requested", Required = Newtonsoft.Json.Required.Always)]
        public bool Cancellation_requested { get; set; }

    }

    /// <summary>
    /// The certificate list result.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateListResult
    {
        /// <summary>
        /// A response message containing a list of certificates in the key vault along with a link to the next page of certificates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CertificateItem> Value { get; set; }

        /// <summary>
        /// The URL to get the next set of certificates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// A list of certificates that have been deleted in this vault.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeletedCertificateListResult
    {
        /// <summary>
        /// A response message containing a list of deleted certificates in the vault along with a link to the next page of deleted certificates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DeletedCertificateItem> Value { get; set; }

        /// <summary>
        /// The URL to get the next set of deleted certificates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// The certificate issuer list result.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateIssuerListResult
    {
        /// <summary>
        /// A response message containing a list of certificate issuers in the key vault along with a link to the next page of certificate issuers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CertificateIssuerItem> Value { get; set; }

        /// <summary>
        /// The URL to get the next set of certificate issuers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// The pending certificate signing request result.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PendingCertificateSigningRequestResult
    {
        /// <summary>
        /// The pending certificate signing request as Base64 encoded string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// The certificate restore parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateRestoreParameters
    {
        /// <summary>
        /// The backup blob associated with a certificate bundle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

    }

    /// <summary>
    /// The backup certificate result, containing the backup blob.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BackupCertificateResult
    {
        /// <summary>
        /// The backup blob containing the backed up certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// The key vault error exception.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyVaultError
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The object attributes managed by the KeyVault service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attributes
    {
        /// <summary>
        /// Determines whether the object is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Not before date in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nbf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nbf { get; set; }

        /// <summary>
        /// Expiry date in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Exp { get; set; }

        /// <summary>
        /// Creation time in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Created { get; set; }

        /// <summary>
        /// Last updated time in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Updated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The key vault server error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// The error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// The error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("innererror", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error Innererror { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of the key pair backing a certificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyProperties
    {
        /// <summary>
        /// Indicates if the private key can be exported. Release policy must be provided when creating the first version of an exportable key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Exportable { get; set; }

        /// <summary>
        /// The type of key pair to be used for the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public KeyPropertiesKty? Kty { get; set; }

        /// <summary>
        /// The key size in bits. For example: 2048, 3072, or 4096 for RSA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Key_size { get; set; }

        /// <summary>
        /// Indicates if the same key pair will be used on certificate renewal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reuse_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Reuse_key { get; set; }

        /// <summary>
        /// Elliptic curve name. For valid values, see JsonWebKeyCurveName.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("crv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public KeyPropertiesCrv? Crv { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of the key backing a certificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecretProperties
    {
        /// <summary>
        /// The media type (MIME type).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CertificateAttributesRecoveryLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Purgeable")]
        Purgeable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Recoverable+Purgeable")]
        Recoverable_Purgeable = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Recoverable")]
        Recoverable = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Recoverable+ProtectedSubscription")]
        Recoverable_ProtectedSubscription = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomizedRecoverable+Purgeable")]
        CustomizedRecoverable_Purgeable = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomizedRecoverable")]
        CustomizedRecoverable = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomizedRecoverable+ProtectedSubscription")]
        CustomizedRecoverable_ProtectedSubscription = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Key_usage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"digitalSignature")]
        DigitalSignature = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"nonRepudiation")]
        NonRepudiation = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"keyEncipherment")]
        KeyEncipherment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"dataEncipherment")]
        DataEncipherment = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"keyAgreement")]
        KeyAgreement = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"keyCertSign")]
        KeyCertSign = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"cRLSign")]
        CRLSign = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"encipherOnly")]
        EncipherOnly = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"decipherOnly")]
        DecipherOnly = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Action_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EmailContacts")]
        EmailContacts = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoRenew")]
        AutoRenew = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum KeyPropertiesKty
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EC-HSM")]
        ECHSM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RSA")]
        RSA = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RSA-HSM")]
        RSAHSM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"oct")]
        Oct = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"oct-HSM")]
        OctHSM = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum KeyPropertiesCrv
    {

        [System.Runtime.Serialization.EnumMember(Value = @"P-256")]
        P256 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"P-384")]
        P384 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"P-521")]
        P521 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"P-256K")]
        P256K = 3,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625