//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace ImageController
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IImagesController
    {

        /// <remarks>
        /// Create or update an image.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="imageName">The name of the image.</param>

        /// <param name="parameters">Parameters supplied to the Create Image operation.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Image> CreateOrUpdateAsync(string resourceGroupName, string imageName, Image parameters, string api_version, string subscriptionId);

        /// <remarks>
        /// Update an image.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="imageName">The name of the image.</param>

        /// <param name="parameters">Parameters supplied to the Update Image operation.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Image> UpdateAsync(string resourceGroupName, string imageName, ImageUpdate parameters, string api_version, string subscriptionId);

        /// <remarks>
        /// Deletes an Image.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="imageName">The name of the image.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task DeleteAsync(string resourceGroupName, string imageName, string api_version, string subscriptionId);

        /// <remarks>
        /// Gets an image.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="imageName">The name of the image.</param>

        /// <param name="expand">The expand expression to apply on the operation.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Image> GetAsync(string resourceGroupName, string imageName, string expand, string api_version, string subscriptionId);

        /// <remarks>
        /// Gets the list of images under a resource group. Use nextLink property in the response to get the next page of Images. Do this till nextLink is null to fetch all the Images.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<ImageListResult> ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId);

        /// <remarks>
        /// Gets the list of Images in the subscription. Use nextLink property in the response to get the next page of Images. Do this till nextLink is null to fetch all the Images.
        /// </remarks>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<ImageListResult> ListAsync(string api_version, string subscriptionId);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class ImagesController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IImagesController _implementation;

        public ImagesController(IImagesController implementation)
        {
            _implementation = implementation;
        }

        /// <remarks>
        /// Create or update an image.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="imageName">The name of the image.</param>
        /// <param name="parameters">Parameters supplied to the Create Image operation.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}")]
        public System.Threading.Tasks.Task<Image> CreateOrUpdate(string resourceGroupName, string imageName, [Microsoft.AspNetCore.Mvc.FromBody] Image parameters, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.CreateOrUpdateAsync(resourceGroupName, imageName, parameters, api_version, subscriptionId);
        }

        /// <remarks>
        /// Update an image.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="imageName">The name of the image.</param>
        /// <param name="parameters">Parameters supplied to the Update Image operation.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}")]
        public System.Threading.Tasks.Task<Image> Update(string resourceGroupName, string imageName, [Microsoft.AspNetCore.Mvc.FromBody] ImageUpdate parameters, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.UpdateAsync(resourceGroupName, imageName, parameters, api_version, subscriptionId);
        }

        /// <remarks>
        /// Deletes an Image.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="imageName">The name of the image.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}")]
        public System.Threading.Tasks.Task Delete(string resourceGroupName, string imageName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.DeleteAsync(resourceGroupName, imageName, api_version, subscriptionId);
        }

        /// <remarks>
        /// Gets an image.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="imageName">The name of the image.</param>
        /// <param name="expand">The expand expression to apply on the operation.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}")]
        public System.Threading.Tasks.Task<Image> Get(string resourceGroupName, string imageName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "$expand")] string expand, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.GetAsync(resourceGroupName, imageName, expand, api_version, subscriptionId);
        }

        /// <remarks>
        /// Gets the list of images under a resource group. Use nextLink property in the response to get the next page of Images. Do this till nextLink is null to fetch all the Images.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images")]
        public System.Threading.Tasks.Task<ImageListResult> ListByResourceGroup(string resourceGroupName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.ListByResourceGroupAsync(resourceGroupName, api_version, subscriptionId);
        }

        /// <remarks>
        /// Gets the list of Images in the subscription. Use nextLink property in the response to get the next page of Images. Do this till nextLink is null to fetch all the Images.
        /// </remarks>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/providers/Microsoft.Compute/images")]
        public System.Threading.Tasks.Task<ImageListResult> List([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.ListAsync(api_version, subscriptionId);
        }

    }

    /// <summary>
    /// Describes an Operating System disk.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageOSDisk : ImageDisk
    {
        /// <summary>
        /// This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. Possible values are: **Windows,** **Linux.**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("osType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImageOSDiskOsType OsType { get; set; }

        /// <summary>
        /// The OS State. For managed images, use Generalized.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("osState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImageOSDiskOsState OsState { get; set; }

    }

    /// <summary>
    /// Describes a data disk.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageDataDisk : ImageDisk
    {
        /// <summary>
        /// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lun", Required = Newtonsoft.Json.Required.Always)]
        public int Lun { get; set; }

    }

    /// <summary>
    /// Describes a image disk.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageDisk
    {
        /// <summary>
        /// The snapshot.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("snapshot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource Snapshot { get; set; }

        /// <summary>
        /// The managedDisk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("managedDisk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource ManagedDisk { get; set; }

        /// <summary>
        /// The Virtual Hard Disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blobUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BlobUri { get; set; }

        /// <summary>
        /// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("caching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImageDiskCaching? Caching { get; set; }

        /// <summary>
        /// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. This value cannot be larger than 1023 GB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diskSizeGB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DiskSizeGB { get; set; }

        /// <summary>
        /// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storageAccountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StorageAccountType? StorageAccountType { get; set; }

        /// <summary>
        /// Specifies the customer managed disk encryption set resource id for the managed image disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diskEncryptionSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource DiskEncryptionSet { get; set; }

    }

    /// <summary>
    /// Describes a storage profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageStorageProfile
    {
        /// <summary>
        /// Specifies information about the operating system disk used by the virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("osDisk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageOSDisk OsDisk { get; set; }

        /// <summary>
        /// Specifies the parameters that are used to add a data disk to a virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataDisks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ImageDataDisk> DataDisks { get; set; }

        /// <summary>
        /// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zoneResilient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ZoneResilient { get; set; }

    }

    /// <summary>
    /// Describes the properties of an Image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageProperties
    {
        /// <summary>
        /// The source virtual machine from which Image is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceVirtualMachine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource SourceVirtualMachine { get; set; }

        /// <summary>
        /// Specifies the storage settings for the virtual machine disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storageProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageStorageProfile StorageProfile { get; set; }

        /// <summary>
        /// The provisioning state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Specifies the HyperVGenerationType of the VirtualMachine created from the image. From API Version 2019-03-01 if the image source is a blob, then we need the user to specify the value, if the source is managed resource like disk or snapshot, we may require the user to specify the property if we cannot deduce it from the source managed resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hyperVGeneration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HyperVGenerationType? HyperVGeneration { get; set; }

    }

    /// <summary>
    /// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Image : Resource
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageProperties Properties { get; set; }

        /// <summary>
        /// The extended location of the Image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtendedLocation ExtendedLocation { get; set; }

    }

    /// <summary>
    /// The source user image virtual hard disk. Only tags may be updated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageUpdate : UpdateResource
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageProperties Properties { get; set; }

    }

    /// <summary>
    /// The List Image operation response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageListResult
    {
        /// <summary>
        /// The list of Images.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<Image> Value { get; set; } = new System.Collections.Generic.List<Image>();

        /// <summary>
        /// The uri to fetch the next page of Images. Call ListNext() with this to fetch the next page of Images.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// An error response from the Compute service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudError
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiError Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubResource
    {
        /// <summary>
        /// Resource Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Instance view status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstanceViewStatus
    {
        /// <summary>
        /// The status code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// The level code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstanceViewStatusLevel? Level { get; set; }

        /// <summary>
        /// The short localizable label for the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayStatus { get; set; }

        /// <summary>
        /// The detailed status message, including for alerts and error messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// The time of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes a reference to Key Vault Secret
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyVaultSecretReference
    {
        /// <summary>
        /// The URL referencing a secret in a Key Vault.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secretUrl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SecretUrl { get; set; }

        /// <summary>
        /// The relative URL of the Key Vault containing the secret.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceVault", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SubResource SourceVault { get; set; } = new SubResource();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The Resource model definition with location property as optional.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceWithOptionalLocation
    {
        /// <summary>
        /// Resource location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }

        /// <summary>
        /// Resource Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Resource name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Resource type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Resource tags
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The Update Resource model definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateResource
    {
        /// <summary>
        /// Resource tags
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Api error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiError
    {
        /// <summary>
        /// The Api error details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Details> Details { get; set; }

        /// <summary>
        /// The Api inner error
        /// </summary>
        [Newtonsoft.Json.JsonProperty("innererror", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Innererror Innererror { get; set; }

        /// <summary>
        /// The error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// The target of the particular error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }

        /// <summary>
        /// The error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublicIPAddressSku
    {
        /// <summary>
        /// Specify public IP sku name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PublicIPAddressSkuName? Name { get; set; }

        /// <summary>
        /// Specify public IP sku tier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PublicIPAddressSkuTier? Tier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAssignedIdentities : System.Collections.Generic.Dictionary<string, Anonymous>
    {

    }

    /// <summary>
    /// Maintenance Operation Status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MaintenanceRedeployStatus
    {
        /// <summary>
        /// True, if customer is allowed to perform Maintenance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isCustomerInitiatedMaintenanceAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCustomerInitiatedMaintenanceAllowed { get; set; }

        /// <summary>
        /// Start Time for the Pre Maintenance Window.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preMaintenanceWindowStartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PreMaintenanceWindowStartTime { get; set; }

        /// <summary>
        /// End Time for the Pre Maintenance Window.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preMaintenanceWindowEndTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PreMaintenanceWindowEndTime { get; set; }

        /// <summary>
        /// Start Time for the Maintenance Window.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maintenanceWindowStartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MaintenanceWindowStartTime { get; set; }

        /// <summary>
        /// End Time for the Maintenance Window.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maintenanceWindowEndTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MaintenanceWindowEndTime { get; set; }

        /// <summary>
        /// The Last Maintenance Operation Result Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastOperationResultCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MaintenanceRedeployStatusLastOperationResultCode? LastOperationResultCode { get; set; }

        /// <summary>
        /// Message returned for the last Maintenance Operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastOperationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastOperationMessage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The instance view of the disk.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DiskInstanceView
    {
        /// <summary>
        /// The disk name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies the encryption settings for the OS Disk. &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encryptionSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<EncryptionSettings> EncryptionSettings { get; set; }

        /// <summary>
        /// The resource status information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<InstanceViewStatus> Statuses { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The instance view of a virtual machine boot diagnostics.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BootDiagnosticsInstanceView
    {
        /// <summary>
        /// The console screenshot blob URI. **Note:** This will **not** be set if boot diagnostics is currently enabled with managed storage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consoleScreenshotBlobUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConsoleScreenshotBlobUri { get; set; }

        /// <summary>
        /// The serial console log blob Uri. **Note:** This will **not** be set if boot diagnostics is currently enabled with managed storage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serialConsoleLogBlobUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialConsoleLogBlobUri { get; set; }

        /// <summary>
        /// The boot diagnostics status information for the VM. **Note:** It will be set only if there are errors encountered in enabling boot diagnostics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InstanceViewStatus Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the hardware settings for the virtual machine.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HardwareProfile
    {
        /// <summary>
        /// Specifies the size of the virtual machine. The enum data type is currently deprecated and will be removed by December 23rd 2023. The recommended way to get the list of available sizes is using these APIs: [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes), [List all available virtual machine sizes in a region]( https://docs.microsoft.com/rest/api/compute/resourceskus/list), [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes). For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/sizes). The available VM sizes depend on region and availability set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vmSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HardwareProfileVmSize? VmSize { get; set; }

        /// <summary>
        /// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-07-01. This feature is still in preview mode and is not supported for VirtualMachineScaleSet. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vmSizeProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VmSizeProperties VmSizeProperties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies Redeploy, Reboot and ScheduledEventsAdditionalPublishingTargets Scheduled Event related configurations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduledEventsPolicy
    {
        /// <summary>
        /// The configuration parameters used while creating userInitiatedRedeploy scheduled event setting creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userInitiatedRedeploy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInitiatedRedeploy UserInitiatedRedeploy { get; set; }

        /// <summary>
        /// The configuration parameters used while creating userInitiatedReboot scheduled event setting creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userInitiatedReboot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInitiatedReboot UserInitiatedReboot { get; set; }

        /// <summary>
        /// The configuration parameters used while publishing scheduledEventsAdditionalPublishingTargets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledEventsAdditionalPublishingTargets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScheduledEventsAdditionalPublishingTargets ScheduledEventsAdditionalPublishingTargets { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the storage settings for the virtual machine disks.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StorageProfile
    {
        /// <summary>
        /// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageReference ImageReference { get; set; }

        /// <summary>
        /// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("osDisk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OsDisk OsDisk { get; set; }

        /// <summary>
        /// Specifies the parameters that are used to add a data disk to a virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataDisks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DataDisks> DataDisks { get; set; }

        /// <summary>
        /// Specifies the disk controller type configured for the VM. **Note:** This property will be set to the default disk controller type if not specified provided virtual machine is being created with 'hyperVGeneration' set to V2 based on the capabilities of the operating system disk and VM size from the the specified minimum api version. You need to deallocate the VM before updating its disk controller type unless you are updating the VM size in the VM configuration which implicitly deallocates and reallocates the VM. Minimum api-version: 2022-08-01.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diskControllerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DiskControllerType? DiskControllerType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Enables or disables a capability on the virtual machine or virtual machine scale set.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalCapabilities
    {
        /// <summary>
        /// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ultraSSDEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UltraSSDEnabled { get; set; }

        /// <summary>
        /// The flag that enables or disables hibernation capability on the VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hibernationEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HibernationEnabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OSProfile
    {
        /// <summary>
        /// Specifies the host OS name of the virtual machine. This name cannot be updated after the VM is created. **Max-length (Windows):** 15 characters. **Max-length (Linux):** 64 characters. For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("computerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ComputerName { get; set; }

        /// <summary>
        /// Specifies the name of the administrator account. &lt;br&gt;&lt;br&gt; This property cannot be updated after the VM is created. &lt;br&gt;&lt;br&gt; **Windows-only restriction:** Cannot end in "." &lt;br&gt;&lt;br&gt; **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". &lt;br&gt;&lt;br&gt; **Minimum-length (Linux):** 1  character &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 64 characters &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 20 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adminUsername", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdminUsername { get; set; }

        /// <summary>
        /// Specifies the password of the administrator account. &lt;br&gt;&lt;br&gt; **Minimum-length (Windows):** 8 characters &lt;br&gt;&lt;br&gt; **Minimum-length (Linux):** 6 characters &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 123 characters &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 72 characters &lt;br&gt;&lt;br&gt; **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled &lt;br&gt; Has lower characters &lt;br&gt;Has upper characters &lt;br&gt; Has a digit &lt;br&gt; Has a special character (Regex match [\W_]) &lt;br&gt;&lt;br&gt; **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" &lt;br&gt;&lt;br&gt; For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) &lt;br&gt;&lt;br&gt; For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adminPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdminPassword { get; set; }

        /// <summary>
        /// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. **Note: Do not pass any secrets or passwords in customData property.** This property cannot be updated after the VM is created. The property 'customData' is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/). For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomData { get; set; }

        /// <summary>
        /// Specifies Windows operating system settings on the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("windowsConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WindowsConfiguration WindowsConfiguration { get; set; }

        /// <summary>
        /// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linuxConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LinuxConfiguration LinuxConfiguration { get; set; }

        /// <summary>
        /// Specifies set of certificates that should be installed onto the virtual machine. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secrets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Secrets> Secrets { get; set; }

        /// <summary>
        /// Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowExtensionOperations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowExtensionOperations { get; set; }

        /// <summary>
        /// Optional property which must either be set to True or omitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requireGuestProvisionSignal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequireGuestProvisionSignal { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the network interfaces or the networking configuration of the virtual machine.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetworkProfile
    {
        /// <summary>
        /// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkInterfaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NetworkInterfaces> NetworkInterfaces { get; set; }

        /// <summary>
        /// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkApiVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NetworkProfileNetworkApiVersion? NetworkApiVersion { get; set; }

        /// <summary>
        /// Specifies the networking configurations that will be used to create the virtual machine networking resources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkInterfaceConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<VirtualMachineNetworkInterfaceConfiguration> NetworkInterfaceConfigurations { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the Security profile settings for the virtual machine or virtual machine scale set.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecurityProfile
    {
        /// <summary>
        /// Specifies the security settings like secure boot and vTPM used while creating the virtual machine. Minimum api-version: 2020-12-01.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uefiSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UefiSettings UefiSettings { get; set; }

        /// <summary>
        /// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. The default behavior is: The Encryption at host will be disabled unless this property is set to true for the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encryptionAtHost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EncryptionAtHost { get; set; }

        /// <summary>
        /// Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings. The default behavior is: UefiSettings will not be enabled unless this property is set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SecurityProfileSecurityType? SecurityType { get; set; }

        /// <summary>
        /// Specifies the Managed Identity used by ADE to get access token for keyvault operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encryptionIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EncryptionIdentity EncryptionIdentity { get; set; }

        /// <summary>
        /// Specifies ProxyAgent settings while creating the virtual machine. Minimum api-version: 2023-09-01.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proxyAgentSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProxyAgentSettings ProxyAgentSettings { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DiagnosticsProfile
    {
        /// <summary>
        /// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. **NOTE**: If storageUri is being specified then ensure that the storage account is in the same region and subscription as the VM. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bootDiagnostics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BootDiagnostics BootDiagnostics { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the priority for a standalone virtual machine or the virtual machines in the scale set. 'Low' enum will be deprecated in the future, please use 'Spot' as the enum to deploy Azure Spot VM/VMSS.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Priority
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Regular")]
        Regular = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Low")]
        Low = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Spot")]
        Spot = 2,

    }

    /// <summary>
    /// Specifies the eviction policy for the Azure Spot VM/VMSS
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EvictionPolicy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Deallocate")]
        Deallocate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Delete")]
        Delete = 1,

    }

    /// <summary>
    /// Specifies the billing related details of a Azure Spot VM or VMSS. Minimum api-version: 2019-03-01.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingProfile
    {
        /// <summary>
        /// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. &lt;br&gt;&lt;br&gt; This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. &lt;br&gt;&lt;br&gt; The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; - Any decimal value greater than zero. Example: 0.01538 &lt;br&gt;&lt;br&gt; -1 – indicates default price to be up-to on-demand. &lt;br&gt;&lt;br&gt; You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. &lt;br&gt;&lt;br&gt;Minimum api-version: 2019-03-01.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxPrice { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduledEventsProfile
    {
        /// <summary>
        /// Specifies Terminate Scheduled Event related configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminateNotificationProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TerminateNotificationProfile TerminateNotificationProfile { get; set; }

        /// <summary>
        /// Specifies OS Image Scheduled Event related configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("osImageNotificationProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OsImageNotificationProfile OsImageNotificationProfile { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The parameters of a capacity reservation Profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CapacityReservationProfile
    {
        /// <summary>
        /// Specifies the capacity reservation group resource id that should be used for allocating the virtual machine or scaleset vm instances provided enough capacity has been reserved. Please refer to https://aka.ms/CapacityReservation for more details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("capacityReservationGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource CapacityReservationGroup { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains the list of gallery applications that should be made available to the VM/VMSS
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationProfile
    {
        /// <summary>
        /// Specifies the gallery applications that should be made available to the VM/VMSS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("galleryApplications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<GalleryApplications> GalleryApplications { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The Resource model definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Resource
    {
        /// <summary>
        /// Resource Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Resource name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Resource type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Resource location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Location { get; set; }

        /// <summary>
        /// Resource tags
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click **Save**.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Plan
    {
        /// <summary>
        /// The plan ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The publisher ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Publisher { get; set; }

        /// <summary>
        /// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Product { get; set; }

        /// <summary>
        /// The promotion code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PromotionCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The complex type of the extended location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExtendedLocation
    {
        /// <summary>
        /// The name of the extended location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The type of the extended location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes a virtual machine network interface configurations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VirtualMachineNetworkInterfaceConfiguration
    {
        /// <summary>
        /// The network interface configuration name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the storage account type for the managed disk. Managed OS disk storage account type can only be set when you create the scale set. NOTE: UltraSSD_LRS can only be used with data disks. It cannot be used with OS Disk. Standard_LRS uses Standard HDD. StandardSSD_LRS uses Standard SSD. Premium_LRS uses Premium SSD. UltraSSD_LRS uses Ultra disk. Premium_ZRS uses Premium SSD zone redundant storage. StandardSSD_ZRS uses Standard SSD zone redundant storage. For more information regarding disks supported for Windows Virtual Machines, refer to https://docs.microsoft.com/azure/virtual-machines/windows/disks-types and, for Linux Virtual Machines, refer to https://docs.microsoft.com/azure/virtual-machines/linux/disks-types
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StorageAccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_LRS")]
        Standard_LRS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Premium_LRS")]
        Premium_LRS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"StandardSSD_LRS")]
        StandardSSD_LRS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UltraSSD_LRS")]
        UltraSSD_LRS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Premium_ZRS")]
        Premium_ZRS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"StandardSSD_ZRS")]
        StandardSSD_ZRS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PremiumV2_LRS")]
        PremiumV2_LRS = 6,

    }

    /// <summary>
    /// Specifies the HyperVGeneration Type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HyperVGenerationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"V1")]
        V1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"V2")]
        V2 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ImageOSDiskOsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Linux")]
        Linux = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ImageOSDiskOsState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Generalized")]
        Generalized = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Specialized")]
        Specialized = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ImageDiskCaching
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadOnly")]
        ReadOnly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadWrite")]
        ReadWrite = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InstanceViewStatusLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Info")]
        Info = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 2,

    }

    /// <summary>
    /// Api error base.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Details
    {
        /// <summary>
        /// The error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// The target of the particular error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }

        /// <summary>
        /// The error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Inner error details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Innererror
    {
        /// <summary>
        /// The exception type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptiontype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exceptiontype { get; set; }

        /// <summary>
        /// The internal error message or exception dump.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errordetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Errordetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PublicIPAddressSkuName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PublicIPAddressSkuTier
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Regional")]
        Regional = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Global")]
        Global = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {
        /// <summary>
        /// The principal id of user assigned identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("principalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrincipalId { get; set; }

        /// <summary>
        /// The client id of user assigned identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MaintenanceRedeployStatusLastOperationResultCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RetryLater")]
        RetryLater = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MaintenanceAborted")]
        MaintenanceAborted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MaintenanceCompleted")]
        MaintenanceCompleted = 3,

    }

    /// <summary>
    /// Describes a Encryption Settings for a Disk
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EncryptionSettings
    {
        /// <summary>
        /// Specifies the location of the disk encryption key, which is a Key Vault Secret.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diskEncryptionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public KeyVaultSecretReference DiskEncryptionKey { get; set; }

        /// <summary>
        /// Specifies the location of the key encryption key in Key Vault.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyEncryptionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public KeyEncryptionKey KeyEncryptionKey { get; set; }

        /// <summary>
        /// Specifies whether disk encryption should be enabled on the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HardwareProfileVmSize
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Basic_A0")]
        Basic_A0 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Basic_A1")]
        Basic_A1 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Basic_A2")]
        Basic_A2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Basic_A3")]
        Basic_A3 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Basic_A4")]
        Basic_A4 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A0")]
        Standard_A0 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A1")]
        Standard_A1 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A2")]
        Standard_A2 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A3")]
        Standard_A3 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A4")]
        Standard_A4 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A5")]
        Standard_A5 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A6")]
        Standard_A6 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A7")]
        Standard_A7 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A8")]
        Standard_A8 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A9")]
        Standard_A9 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A10")]
        Standard_A10 = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A11")]
        Standard_A11 = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A1_v2")]
        Standard_A1_v2 = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A2_v2")]
        Standard_A2_v2 = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A4_v2")]
        Standard_A4_v2 = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A8_v2")]
        Standard_A8_v2 = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A2m_v2")]
        Standard_A2m_v2 = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A4m_v2")]
        Standard_A4m_v2 = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_A8m_v2")]
        Standard_A8m_v2 = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_B1s")]
        Standard_B1s = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_B1ms")]
        Standard_B1ms = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_B2s")]
        Standard_B2s = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_B2ms")]
        Standard_B2ms = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_B4ms")]
        Standard_B4ms = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_B8ms")]
        Standard_B8ms = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D1")]
        Standard_D1 = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D2")]
        Standard_D2 = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D3")]
        Standard_D3 = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D4")]
        Standard_D4 = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D11")]
        Standard_D11 = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D12")]
        Standard_D12 = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D13")]
        Standard_D13 = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D14")]
        Standard_D14 = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D1_v2")]
        Standard_D1_v2 = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D2_v2")]
        Standard_D2_v2 = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D3_v2")]
        Standard_D3_v2 = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D4_v2")]
        Standard_D4_v2 = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D5_v2")]
        Standard_D5_v2 = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D2_v3")]
        Standard_D2_v3 = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D4_v3")]
        Standard_D4_v3 = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D8_v3")]
        Standard_D8_v3 = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D16_v3")]
        Standard_D16_v3 = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D32_v3")]
        Standard_D32_v3 = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D64_v3")]
        Standard_D64_v3 = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D2s_v3")]
        Standard_D2s_v3 = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D4s_v3")]
        Standard_D4s_v3 = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D8s_v3")]
        Standard_D8s_v3 = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D16s_v3")]
        Standard_D16s_v3 = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D32s_v3")]
        Standard_D32s_v3 = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D64s_v3")]
        Standard_D64s_v3 = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D11_v2")]
        Standard_D11_v2 = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D12_v2")]
        Standard_D12_v2 = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D13_v2")]
        Standard_D13_v2 = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D14_v2")]
        Standard_D14_v2 = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_D15_v2")]
        Standard_D15_v2 = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS1")]
        Standard_DS1 = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS2")]
        Standard_DS2 = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS3")]
        Standard_DS3 = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS4")]
        Standard_DS4 = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS11")]
        Standard_DS11 = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS12")]
        Standard_DS12 = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS13")]
        Standard_DS13 = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS14")]
        Standard_DS14 = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS1_v2")]
        Standard_DS1_v2 = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS2_v2")]
        Standard_DS2_v2 = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS3_v2")]
        Standard_DS3_v2 = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS4_v2")]
        Standard_DS4_v2 = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS5_v2")]
        Standard_DS5_v2 = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS11_v2")]
        Standard_DS11_v2 = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS12_v2")]
        Standard_DS12_v2 = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS13_v2")]
        Standard_DS13_v2 = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS14_v2")]
        Standard_DS14_v2 = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS15_v2")]
        Standard_DS15_v2 = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS13-4_v2")]
        Standard_DS134_v2 = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS13-2_v2")]
        Standard_DS132_v2 = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS14-8_v2")]
        Standard_DS148_v2 = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_DS14-4_v2")]
        Standard_DS144_v2 = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E2_v3")]
        Standard_E2_v3 = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E4_v3")]
        Standard_E4_v3 = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E8_v3")]
        Standard_E8_v3 = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E16_v3")]
        Standard_E16_v3 = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E32_v3")]
        Standard_E32_v3 = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E64_v3")]
        Standard_E64_v3 = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E2s_v3")]
        Standard_E2s_v3 = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E4s_v3")]
        Standard_E4s_v3 = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E8s_v3")]
        Standard_E8s_v3 = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E16s_v3")]
        Standard_E16s_v3 = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E32s_v3")]
        Standard_E32s_v3 = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E64s_v3")]
        Standard_E64s_v3 = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E32-16_v3")]
        Standard_E3216_v3 = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E32-8s_v3")]
        Standard_E328s_v3 = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E64-32s_v3")]
        Standard_E6432s_v3 = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_E64-16s_v3")]
        Standard_E6416s_v3 = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F1")]
        Standard_F1 = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F2")]
        Standard_F2 = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F4")]
        Standard_F4 = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F8")]
        Standard_F8 = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F16")]
        Standard_F16 = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F1s")]
        Standard_F1s = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F2s")]
        Standard_F2s = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F4s")]
        Standard_F4s = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F8s")]
        Standard_F8s = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F16s")]
        Standard_F16s = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F2s_v2")]
        Standard_F2s_v2 = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F4s_v2")]
        Standard_F4s_v2 = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F8s_v2")]
        Standard_F8s_v2 = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F16s_v2")]
        Standard_F16s_v2 = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F32s_v2")]
        Standard_F32s_v2 = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F64s_v2")]
        Standard_F64s_v2 = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_F72s_v2")]
        Standard_F72s_v2 = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_G1")]
        Standard_G1 = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_G2")]
        Standard_G2 = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_G3")]
        Standard_G3 = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_G4")]
        Standard_G4 = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_G5")]
        Standard_G5 = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_GS1")]
        Standard_GS1 = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_GS2")]
        Standard_GS2 = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_GS3")]
        Standard_GS3 = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_GS4")]
        Standard_GS4 = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_GS5")]
        Standard_GS5 = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_GS4-8")]
        Standard_GS48 = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_GS4-4")]
        Standard_GS44 = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_GS5-16")]
        Standard_GS516 = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_GS5-8")]
        Standard_GS58 = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_H8")]
        Standard_H8 = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_H16")]
        Standard_H16 = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_H8m")]
        Standard_H8m = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_H16m")]
        Standard_H16m = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_H16r")]
        Standard_H16r = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_H16mr")]
        Standard_H16mr = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_L4s")]
        Standard_L4s = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_L8s")]
        Standard_L8s = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_L16s")]
        Standard_L16s = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_L32s")]
        Standard_L32s = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_M64s")]
        Standard_M64s = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_M64ms")]
        Standard_M64ms = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_M128s")]
        Standard_M128s = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_M128ms")]
        Standard_M128ms = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_M64-32ms")]
        Standard_M6432ms = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_M64-16ms")]
        Standard_M6416ms = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_M128-64ms")]
        Standard_M12864ms = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_M128-32ms")]
        Standard_M12832ms = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NC6")]
        Standard_NC6 = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NC12")]
        Standard_NC12 = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NC24")]
        Standard_NC24 = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NC24r")]
        Standard_NC24r = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NC6s_v2")]
        Standard_NC6s_v2 = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NC12s_v2")]
        Standard_NC12s_v2 = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NC24s_v2")]
        Standard_NC24s_v2 = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NC24rs_v2")]
        Standard_NC24rs_v2 = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NC6s_v3")]
        Standard_NC6s_v3 = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NC12s_v3")]
        Standard_NC12s_v3 = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NC24s_v3")]
        Standard_NC24s_v3 = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NC24rs_v3")]
        Standard_NC24rs_v3 = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_ND6s")]
        Standard_ND6s = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_ND12s")]
        Standard_ND12s = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_ND24s")]
        Standard_ND24s = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_ND24rs")]
        Standard_ND24rs = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NV6")]
        Standard_NV6 = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NV12")]
        Standard_NV12 = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_NV24")]
        Standard_NV24 = 165,

    }

    /// <summary>
    /// Specifies VM Size Property settings on the virtual machine.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VmSizeProperties
    {
        /// <summary>
        /// Specifies the number of vCPUs available for the VM. When this property is not specified in the request body the default behavior is to set it to the value of vCPUs available for that VM size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vCPUsAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VCPUsAvailable { get; set; }

        /// <summary>
        /// Specifies the vCPU to physical core ratio. When this property is not specified in the request body the default behavior is set to the value of vCPUsPerCore for the VM Size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list). **Setting this property to 1 also means that hyper-threading is disabled.**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vCPUsPerCore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VCPUsPerCore { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies Redeploy related Scheduled Event related configurations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserInitiatedRedeploy
    {
        /// <summary>
        /// Specifies Redeploy Scheduled Event related configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("automaticallyApprove", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutomaticallyApprove { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies Reboot related Scheduled Event related configurations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserInitiatedReboot
    {
        /// <summary>
        /// Specifies Reboot Scheduled Event related configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("automaticallyApprove", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutomaticallyApprove { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScheduledEventsAdditionalPublishingTargets
    {
        /// <summary>
        /// The configuration parameters used while creating eventGridAndResourceGraph Scheduled Event setting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventGridAndResourceGraph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EventGridAndResourceGraph EventGridAndResourceGraph { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageReference : SubResource
    {
        /// <summary>
        /// The image publisher.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Publisher { get; set; }

        /// <summary>
        /// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Offer { get; set; }

        /// <summary>
        /// The image SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sku { get; set; }

        /// <summary>
        /// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available. Please do not use field 'version' for gallery image deployment, gallery image should always use 'id' field for deployment, to use 'latest' version of gallery image, just set '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}' in the 'id' field without version input.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        /// <summary>
        /// Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from 'version', only if the value specified in 'version' field is 'latest'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exactVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExactVersion { get; set; }

        /// <summary>
        /// Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharedGalleryImageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SharedGalleryImageId { get; set; }

        /// <summary>
        /// Specified the community gallery image unique id for vm deployment. This can be fetched from community gallery image GET call.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("communityGalleryImageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommunityGalleryImageId { get; set; }

    }

    /// <summary>
    /// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OsDisk
    {
        /// <summary>
        /// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("osType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OsDiskOsType? OsType { get; set; }

        /// <summary>
        /// Specifies the encryption settings for the OS Disk. Minimum api-version: 2015-06-15.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encryptionSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EncryptionSettings EncryptionSettings { get; set; }

        /// <summary>
        /// The disk name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The virtual hard disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vhd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vhd Vhd { get; set; }

        /// <summary>
        /// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vhd Image { get; set; }

        /// <summary>
        /// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("caching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Caching? Caching { get; set; }

        /// <summary>
        /// Specifies whether writeAccelerator should be enabled or disabled on the disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("writeAcceleratorEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WriteAcceleratorEnabled { get; set; }

        /// <summary>
        /// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diffDiskSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiffDiskSettings DiffDiskSettings { get; set; }

        /// <summary>
        /// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createOption", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateOption CreateOption { get; set; }

        /// <summary>
        /// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diskSizeGB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DiskSizeGB { get; set; }

        /// <summary>
        /// The managed disk parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("managedDisk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManagedDisk ManagedDisk { get; set; }

        /// <summary>
        /// Specifies whether OS Disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the OS disk is deleted when VM is deleted. **Detach.** If this value is used, the os disk is retained after VM is deleted. The default value is set to **Detach**. For an ephemeral OS Disk, the default value is set to **Delete**. The user cannot change the delete option for an ephemeral OS Disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deleteOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeleteOption? DeleteOption { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes a data disk.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataDisks
    {
        /// <summary>
        /// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lun", Required = Newtonsoft.Json.Required.Always)]
        public int Lun { get; set; }

        /// <summary>
        /// The disk name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The virtual hard disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vhd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vhd Vhd { get; set; }

        /// <summary>
        /// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vhd Image { get; set; }

        /// <summary>
        /// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("caching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Caching? Caching { get; set; }

        /// <summary>
        /// Specifies whether writeAccelerator should be enabled or disabled on the disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("writeAcceleratorEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WriteAcceleratorEnabled { get; set; }

        /// <summary>
        /// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine data disk. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described. **Empty:** This value is used when creating an empty data disk. **Copy:** This value is used to create a data disk from a snapshot or another disk. **Restore:** This value is used to create a data disk from a disk restore point.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createOption", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateOption CreateOption { get; set; }

        /// <summary>
        /// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diskSizeGB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DiskSizeGB { get; set; }

        /// <summary>
        /// The managed disk parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("managedDisk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManagedDisk ManagedDisk { get; set; }

        /// <summary>
        /// The source resource identifier. It can be a snapshot, or disk restore point from which to create a disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceResource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceResource SourceResource { get; set; }

        /// <summary>
        /// Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toBeDetached", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ToBeDetached { get; set; }

        /// <summary>
        /// Specifies the Read-Write IOPS for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diskIOPSReadWrite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DiskIOPSReadWrite { get; set; }

        /// <summary>
        /// Specifies the bandwidth in MB per second for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diskMBpsReadWrite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DiskMBpsReadWrite { get; set; }

        /// <summary>
        /// Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the virtual machine. Supported values: **ForceDetach.** detachOption: **ForceDetach** is applicable only for managed data disks. If a previous detachment attempt of the data disk did not complete due to an unexpected failure from the virtual machine and the disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes might not have been flushed when using this detach behavior. To force-detach a data disk update toBeDetached to 'true' along with setting detachOption: 'ForceDetach'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detachOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DetachOption? DetachOption { get; set; }

        /// <summary>
        /// Specifies whether data disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the data disk is deleted when VM is deleted. **Detach.** If this value is used, the data disk is retained after VM is deleted. The default value is set to **Detach**.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deleteOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeleteOption? DeleteOption { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the disk controller type configured for the VM and VirtualMachineScaleSet. This property is only supported for virtual machines whose operating system disk and VM sku supports Generation 2 (https://docs.microsoft.com/en-us/azure/virtual-machines/generation-2), please check the HyperVGenerations capability returned as part of VM sku capabilities in the response of Microsoft.Compute SKUs api for the region contains V2 (https://docs.microsoft.com/rest/api/compute/resourceskus/list). For more information about Disk Controller Types supported please refer to https://aka.ms/azure-diskcontrollertypes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DiskControllerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SCSI")]
        SCSI = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NVMe")]
        NVMe = 1,

    }

    /// <summary>
    /// Specifies Windows operating system settings on the virtual machine.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WindowsConfiguration
    {
        /// <summary>
        /// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, it is set to true by default. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisionVMAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProvisionVMAgent { get; set; }

        /// <summary>
        /// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableAutomaticUpdates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableAutomaticUpdates { get; set; }

        /// <summary>
        /// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalUnattendContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AdditionalUnattendContent> AdditionalUnattendContent { get; set; }

        /// <summary>
        /// [Preview Feature] Specifies settings related to VM Guest Patching on Windows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("patchSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSettings PatchSettings { get; set; }

        /// <summary>
        /// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("winRM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WinRM WinRM { get; set; }

        /// <summary>
        /// Indicates whether VMAgent Platform Updates are enabled for the Windows Virtual Machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableVMAgentPlatformUpdates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableVMAgentPlatformUpdates { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinuxConfiguration
    {
        /// <summary>
        /// Specifies whether password authentication should be disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disablePasswordAuthentication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisablePasswordAuthentication { get; set; }

        /// <summary>
        /// Specifies the ssh key configuration for a Linux OS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ssh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ssh Ssh { get; set; }

        /// <summary>
        /// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisionVMAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProvisionVMAgent { get; set; }

        /// <summary>
        /// [Preview Feature] Specifies settings related to VM Guest Patching on Linux.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("patchSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PatchSettings2 PatchSettings { get; set; }

        /// <summary>
        /// Indicates whether VMAgent Platform Updates is enabled for the Linux virtual machine. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableVMAgentPlatformUpdates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableVMAgentPlatformUpdates { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes a set of certificates which are all in the same Key Vault.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Secrets
    {
        /// <summary>
        /// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceVault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource SourceVault { get; set; }

        /// <summary>
        /// The list of key vault references in SourceVault which contain certificates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vaultCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<VaultCertificates> VaultCertificates { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes a network interface reference.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetworkInterfaces : SubResource
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties2 Properties { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NetworkProfileNetworkApiVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"2020-11-01")]
        _20201101 = 0,

    }

    /// <summary>
    /// Specifies the security settings like secure boot and vTPM used while creating the virtual machine. Minimum api-version: 2020-12-01.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UefiSettings
    {
        /// <summary>
        /// Specifies whether secure boot should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secureBootEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SecureBootEnabled { get; set; }

        /// <summary>
        /// Specifies whether vTPM should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vTpmEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VTpmEnabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SecurityProfileSecurityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TrustedLaunch")]
        TrustedLaunch = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ConfidentialVM")]
        ConfidentialVM = 1,

    }

    /// <summary>
    /// Specifies the Managed Identity used by ADE to get access token for keyvault operations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EncryptionIdentity
    {
        /// <summary>
        /// Specifies ARM Resource ID of one of the user identities associated with the VM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userAssignedIdentityResourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserAssignedIdentityResourceId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies ProxyAgent settings while creating the virtual machine. Minimum api-version: 2023-09-01.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProxyAgentSettings
    {
        /// <summary>
        /// Specifies whether ProxyAgent feature should be enabled on the virtual machine or virtual machine scale set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Specifies the mode that ProxyAgent will execute on if the feature is enabled. ProxyAgent will start to audit or monitor but not enforce access control over requests to host endpoints in Audit mode, while in Enforce mode it will enforce access control. The default value is Enforce mode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProxyAgentSettingsMode? Mode { get; set; }

        /// <summary>
        /// Increase the value of this property allows user to reset the key used for securing communication channel between guest and host.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyIncarnationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? KeyIncarnationId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BootDiagnostics
    {
        /// <summary>
        /// Whether boot diagnostics should be enabled on the Virtual Machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Uri of the storage account to use for placing the console output and screenshot. If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storageUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageUri { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TerminateNotificationProfile
    {
        /// <summary>
        /// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notBeforeTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotBeforeTimeout { get; set; }

        /// <summary>
        /// Specifies whether the Terminate Scheduled event is enabled or disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OsImageNotificationProfile
    {
        /// <summary>
        /// Length of time a Virtual Machine being reimaged or having its OS upgraded will have to potentially approve the OS Image Scheduled Event before the event is auto approved (timed out). The configuration is specified in ISO 8601 format, and the value must be 15 minutes (PT15M)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notBeforeTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotBeforeTimeout { get; set; }

        /// <summary>
        /// Specifies whether the OS Image Scheduled event is enabled or disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the required information to reference a compute gallery application version
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryApplications
    {
        /// <summary>
        /// Optional, Specifies a passthrough value for more generic context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tags { get; set; }

        /// <summary>
        /// Optional, Specifies the order in which the packages have to be installed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        /// <summary>
        /// Specifies the GalleryApplicationVersion resource id on the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageReferenceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PackageReferenceId { get; set; }

        /// <summary>
        /// Optional, Specifies the uri to an azure blob that will replace the default configuration for the package if provided
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configurationReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigurationReference { get; set; }

        /// <summary>
        /// Optional, If true, any failure for any operation in the VmApplication will fail the deployment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("treatFailureAsDeploymentFailure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TreatFailureAsDeploymentFailure { get; set; }

        /// <summary>
        /// If set to true, when a new Gallery Application version is available in PIR/SIG, it will be automatically updated for the VM/VMSS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableAutomaticUpgrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableAutomaticUpgrade { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The type of extendedLocation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EdgeZone")]
        EdgeZone = 0,

    }

    /// <summary>
    /// Describes a virtual machine network profile's IP configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties
    {
        /// <summary>
        /// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        /// <summary>
        /// Specify what happens to the network interface when the VM is deleted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deleteOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertiesDeleteOption? DeleteOption { get; set; }

        /// <summary>
        /// Specifies whether the network interface is accelerated networking-enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableAcceleratedNetworking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableAcceleratedNetworking { get; set; }

        /// <summary>
        /// Specifies whether the network interface is disabled for tcp state tracking.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disableTcpStateTracking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisableTcpStateTracking { get; set; }

        /// <summary>
        /// Specifies whether the network interface is FPGA networking-enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableFpga", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableFpga { get; set; }

        /// <summary>
        /// Whether IP forwarding enabled on this NIC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableIPForwarding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableIPForwarding { get; set; }

        /// <summary>
        /// The network security group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkSecurityGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource NetworkSecurityGroup { get; set; }

        /// <summary>
        /// The dns settings to be applied on the network interfaces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dnsSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DnsSettings DnsSettings { get; set; }

        /// <summary>
        /// Specifies the IP configurations of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipConfigurations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<IpConfigurations> IpConfigurations { get; set; } = new System.Collections.Generic.List<IpConfigurations>();

        [Newtonsoft.Json.JsonProperty("dscpConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource DscpConfiguration { get; set; }

        /// <summary>
        /// Specifies whether the Auxiliary mode is enabled for the Network Interface resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auxiliaryMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertiesAuxiliaryMode? AuxiliaryMode { get; set; }

        /// <summary>
        /// Specifies whether the Auxiliary sku is enabled for the Network Interface resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auxiliarySku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertiesAuxiliarySku? AuxiliarySku { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes a reference to Key Vault Key
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyEncryptionKey
    {
        /// <summary>
        /// The URL referencing a key encryption key in Key Vault.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyUrl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string KeyUrl { get; set; }

        /// <summary>
        /// The relative URL of the Key Vault containing the key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceVault", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public SubResource SourceVault { get; set; } = new SubResource();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies eventGridAndResourceGraph related Scheduled Event related configurations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventGridAndResourceGraph
    {
        /// <summary>
        /// Specifies if event grid and resource graph is enabled for Scheduled event related configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OsDiskOsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Linux")]
        Linux = 1,

    }

    /// <summary>
    /// Describes the uri of a disk.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Vhd
    {
        /// <summary>
        /// Specifies the virtual hard disk's uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage**
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Caching
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadOnly")]
        ReadOnly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadWrite")]
        ReadWrite = 2,

    }

    /// <summary>
    /// Describes the parameters of ephemeral disk settings that can be specified for operating system disk. **Note:** The ephemeral disk settings can only be specified for managed disk.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DiffDiskSettings
    {
        /// <summary>
        /// Specifies the ephemeral disk settings for operating system disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("option", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Option? Option { get; set; }

        /// <summary>
        /// Specifies the ephemeral disk placement for operating system disk. Possible values are: **CacheDisk,** **ResourceDisk,** **NvmeDisk.** The defaulting behavior is: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** or **NvmeDisk** is used. Refer to the VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk. Minimum api-version for NvmeDisk: 2024-03-01.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("placement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Placement? Placement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described. **Empty:** This value is used when creating an empty data disk. **Copy:** This value is used to create a data disk from a snapshot or another disk. **Restore:** This value is used to create a data disk from a disk restore point.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreateOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FromImage")]
        FromImage = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Empty")]
        Empty = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Attach")]
        Attach = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Copy")]
        Copy = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Restore")]
        Restore = 4,

    }

    /// <summary>
    /// The parameters of a managed disk.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManagedDisk : SubResource
    {
        /// <summary>
        /// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storageAccountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StorageAccountType? StorageAccountType { get; set; }

        /// <summary>
        /// Specifies the customer managed disk encryption set resource id for the managed disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diskEncryptionSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource DiskEncryptionSet { get; set; }

        /// <summary>
        /// Specifies the security profile for the managed disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securityProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SecurityProfile2 SecurityProfile { get; set; }

    }

    /// <summary>
    /// Specifies the behavior of the managed disk when the VM gets deleted, for example whether the managed disk is deleted or detached. Supported values are: **Delete.** If this value is used, the managed disk is deleted when VM gets deleted. **Detach.** If this value is used, the managed disk is retained after VM gets deleted. Minimum api-version: 2021-03-01.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeleteOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Delete")]
        Delete = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Detach")]
        Detach = 1,

    }

    /// <summary>
    /// The API entity reference.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SourceResource
    {
        /// <summary>
        /// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the virtual machine. Supported values are: **ForceDetach.** detachOption: **ForceDetach** is applicable only for managed data disks. If a previous detachment attempt of the data disk did not complete due to an unexpected failure from the virtual machine and the disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes might not have been flushed when using this detach behavior. To force-detach a data disk update toBeDetached to 'true' along with setting detachOption: 'ForceDetach'.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DetachOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ForceDetach")]
        ForceDetach = 0,

    }

    /// <summary>
    /// Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalUnattendContent
    {
        /// <summary>
        /// The pass name. Currently, the only allowable value is OobeSystem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("passName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdditionalUnattendContentPassName? PassName { get; set; }

        /// <summary>
        /// The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("componentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdditionalUnattendContentComponentName? ComponentName { get; set; }

        /// <summary>
        /// Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdditionalUnattendContentSettingName? SettingName { get; set; }

        /// <summary>
        /// Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies settings related to VM Guest Patching on Windows.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSettings
    {
        /// <summary>
        /// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false&lt;br /&gt;&lt;br /&gt; **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. &lt;br /&gt;&lt;br /&gt; **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("patchMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PatchSettingsPatchMode? PatchMode { get; set; }

        /// <summary>
        /// Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must be set to 'AutomaticByPlatform'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableHotpatching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableHotpatching { get; set; }

        /// <summary>
        /// Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **ImageDefault** - You control the timing of patch assessments on a virtual machine.&lt;br /&gt;&lt;br /&gt; **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true. 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assessmentMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PatchSettingsAssessmentMode? AssessmentMode { get; set; }

        /// <summary>
        /// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Windows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("automaticByPlatformSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AutomaticByPlatformSettings AutomaticByPlatformSettings { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes Windows Remote Management configuration of the VM
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WinRM
    {
        /// <summary>
        /// The list of Windows Remote Management listeners
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listeners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Listeners> Listeners { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// SSH configuration for Linux based VMs running on Azure
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ssh
    {
        /// <summary>
        /// The list of SSH public keys used to authenticate with linux based VMs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicKeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PublicKeys> PublicKeys { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies settings related to VM Guest Patching on Linux.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchSettings2
    {
        /// <summary>
        /// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **ImageDefault** - The virtual machine's default patching configuration is used. &lt;br /&gt;&lt;br /&gt; **AutomaticByPlatform** - The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true
        /// </summary>
        [Newtonsoft.Json.JsonProperty("patchMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PatchSettings2PatchMode? PatchMode { get; set; }

        /// <summary>
        /// Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **ImageDefault** - You control the timing of patch assessments on a virtual machine. &lt;br /&gt;&lt;br /&gt; **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assessmentMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PatchSettings2AssessmentMode? AssessmentMode { get; set; }

        /// <summary>
        /// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Linux.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("automaticByPlatformSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AutomaticByPlatformSettings2 AutomaticByPlatformSettings { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VaultCertificates
    {
        /// <summary>
        /// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: &lt;br&gt;&lt;br&gt; {&lt;br&gt;  "data":"&lt;Base64-encoded-certificate&gt;",&lt;br&gt;  "dataType":"pfx",&lt;br&gt;  "password":"&lt;pfx-file-password&gt;"&lt;br&gt;} &lt;br&gt; To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertificateUrl { get; set; }

        /// <summary>
        /// For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &amp;lt;UppercaseThumbprint&amp;gt;.crt for the X509 certificate file and &amp;lt;UppercaseThumbprint&amp;gt;.prv for private key. Both of these files are .pem formatted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateStore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertificateStore { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes a network interface reference properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties2
    {
        /// <summary>
        /// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        /// <summary>
        /// Specify what happens to the network interface when the VM is deleted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deleteOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties2DeleteOption? DeleteOption { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProxyAgentSettingsMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Audit")]
        Audit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Enforce")]
        Enforce = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PropertiesDeleteOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Delete")]
        Delete = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Detach")]
        Detach = 1,

    }

    /// <summary>
    /// Describes a virtual machines network configuration's DNS settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsSettings
    {
        /// <summary>
        /// List of DNS servers IP addresses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dnsServers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DnsServers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes a virtual machine network profile's IP configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IpConfigurations
    {
        /// <summary>
        /// The IP configuration name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties3 Properties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PropertiesAuxiliaryMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AcceleratedConnections")]
        AcceleratedConnections = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Floating")]
        Floating = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PropertiesAuxiliarySku
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"A1")]
        A1 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"A2")]
        A2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"A4")]
        A4 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"A8")]
        A8 = 4,

    }

    /// <summary>
    /// Specifies the ephemeral disk option for operating system disk.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Option
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Local")]
        Local = 0,

    }

    /// <summary>
    /// Specifies the ephemeral disk placement for operating system disk. This property can be used by user in the request to choose the location i.e, cache disk, resource disk or nvme disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer Ephemeral OS disk size requirements for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements and Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements. Minimum api-version for NvmeDisk: 2024-03-01.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Placement
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CacheDisk")]
        CacheDisk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ResourceDisk")]
        ResourceDisk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NvmeDisk")]
        NvmeDisk = 2,

    }

    /// <summary>
    /// Specifies the security profile settings for the managed disk. **Note:** It can only be set for Confidential VMs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecurityProfile2
    {
        /// <summary>
        /// Specifies the EncryptionType of the managed disk. It is set to DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob, VMGuestStateOnly for encryption of just the VMGuestState blob, and NonPersistedTPM for not persisting firmware state in the VMGuestState blob.. **Note:** It can be set for only Confidential VMs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securityEncryptionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SecurityProfile2SecurityEncryptionType? SecurityEncryptionType { get; set; }

        /// <summary>
        /// Specifies the customer managed disk encryption set resource id for the managed disk that is used for Customer Managed Key encrypted ConfidentialVM OS Disk and VMGuest blob.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diskEncryptionSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource DiskEncryptionSet { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdditionalUnattendContentPassName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OobeSystem")]
        OobeSystem = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdditionalUnattendContentComponentName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Microsoft-Windows-Shell-Setup")]
        MicrosoftWindowsShellSetup = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdditionalUnattendContentSettingName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AutoLogon")]
        AutoLogon = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FirstLogonCommands")]
        FirstLogonCommands = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PatchSettingsPatchMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AutomaticByOS")]
        AutomaticByOS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AutomaticByPlatform")]
        AutomaticByPlatform = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PatchSettingsAssessmentMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ImageDefault")]
        ImageDefault = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AutomaticByPlatform")]
        AutomaticByPlatform = 1,

    }

    /// <summary>
    /// Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Windows patch settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AutomaticByPlatformSettings
    {
        /// <summary>
        /// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rebootSetting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AutomaticByPlatformSettingsRebootSetting? RebootSetting { get; set; }

        /// <summary>
        /// Enables customer to schedule patching without accidental upgrades
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bypassPlatformSafetyChecksOnUserSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BypassPlatformSafetyChecksOnUserSchedule { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes Protocol and thumbprint of Windows Remote Management listener
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Listeners
    {
        /// <summary>
        /// Specifies the protocol of WinRM listener. Possible values are: **http,** **https.**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListenersProtocol? Protocol { get; set; }

        /// <summary>
        /// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be the Base64 encoding of the following JSON Object which is encoded in UTF-8: &lt;br&gt;&lt;br&gt; {&lt;br&gt;  "data":"&lt;Base64-encoded-certificate&gt;",&lt;br&gt;  "dataType":"pfx",&lt;br&gt;  "password":"&lt;pfx-file-password&gt;"&lt;br&gt;} &lt;br&gt; To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertificateUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublicKeys
    {
        /// <summary>
        /// Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyData { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PatchSettings2PatchMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ImageDefault")]
        ImageDefault = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AutomaticByPlatform")]
        AutomaticByPlatform = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PatchSettings2AssessmentMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ImageDefault")]
        ImageDefault = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AutomaticByPlatform")]
        AutomaticByPlatform = 1,

    }

    /// <summary>
    /// Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Linux patch settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AutomaticByPlatformSettings2
    {
        /// <summary>
        /// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rebootSetting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AutomaticByPlatformSettings2RebootSetting? RebootSetting { get; set; }

        /// <summary>
        /// Enables customer to schedule patching without accidental upgrades
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bypassPlatformSafetyChecksOnUserSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BypassPlatformSafetyChecksOnUserSchedule { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties2DeleteOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Delete")]
        Delete = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Detach")]
        Detach = 1,

    }

    /// <summary>
    /// Describes a virtual machine network interface IP configuration properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties3
    {
        /// <summary>
        /// Specifies the identifier of the subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource Subnet { get; set; }

        /// <summary>
        /// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        /// <summary>
        /// The publicIPAddressConfiguration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIPAddressConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PublicIPAddressConfiguration PublicIPAddressConfiguration { get; set; }

        /// <summary>
        /// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAddressVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties3PrivateIPAddressVersion? PrivateIPAddressVersion { get; set; }

        /// <summary>
        /// Specifies an array of references to application security group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationSecurityGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> ApplicationSecurityGroups { get; set; }

        /// <summary>
        /// Specifies an array of references to backend address pools of application gateways. A virtual machine can reference backend address pools of multiple application gateways. Multiple virtual machines cannot use the same application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationGatewayBackendAddressPools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> ApplicationGatewayBackendAddressPools { get; set; }

        /// <summary>
        /// Specifies an array of references to backend address pools of load balancers. A virtual machine can reference backend address pools of one public and one internal load balancer. [Multiple virtual machines cannot use the same basic sku load balancer].
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadBalancerBackendAddressPools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> LoadBalancerBackendAddressPools { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SecurityProfile2SecurityEncryptionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VMGuestStateOnly")]
        VMGuestStateOnly = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DiskWithVMGuestState")]
        DiskWithVMGuestState = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NonPersistedTPM")]
        NonPersistedTPM = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AutomaticByPlatformSettingsRebootSetting
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IfRequired")]
        IfRequired = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Never")]
        Never = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Always")]
        Always = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ListenersProtocol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Http")]
        Http = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Https")]
        Https = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AutomaticByPlatformSettings2RebootSetting
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IfRequired")]
        IfRequired = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Never")]
        Never = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Always")]
        Always = 3,

    }

    /// <summary>
    /// Describes a virtual machines IP Configuration's PublicIPAddress configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublicIPAddressConfiguration
    {
        /// <summary>
        /// The publicIP address configuration name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties4 Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("sku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PublicIPAddressSku Sku { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties3PrivateIPAddressVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IPv4")]
        IPv4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IPv6")]
        IPv6 = 1,

    }

    /// <summary>
    /// Describes a virtual machines IP Configuration's PublicIPAddress configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties4
    {
        /// <summary>
        /// The idle timeout of the public IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idleTimeoutInMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdleTimeoutInMinutes { get; set; }

        /// <summary>
        /// Specify what happens to the public IP address when the VM is deleted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deleteOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties4DeleteOption? DeleteOption { get; set; }

        /// <summary>
        /// The dns settings to be applied on the publicIP addresses .
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dnsSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DnsSettings2 DnsSettings { get; set; }

        /// <summary>
        /// The list of IP tags associated with the public IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipTags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<IpTags> IpTags { get; set; }

        /// <summary>
        /// The PublicIPPrefix from which to allocate publicIP addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIPPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource PublicIPPrefix { get; set; }

        /// <summary>
        /// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIPAddressVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties4PublicIPAddressVersion? PublicIPAddressVersion { get; set; }

        /// <summary>
        /// Specify the public IP allocation type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIPAllocationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties4PublicIPAllocationMethod? PublicIPAllocationMethod { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties4DeleteOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Delete")]
        Delete = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Detach")]
        Detach = 1,

    }

    /// <summary>
    /// Describes a virtual machines network configuration's DNS settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsSettings2
    {
        /// <summary>
        /// The Domain name label prefix of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the domain name label and vm network profile unique ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domainNameLabel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DomainNameLabel { get; set; }

        /// <summary>
        /// The Domain name label scope of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the hashed domain name label with policy according to the domain name label scope and vm network profile unique ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domainNameLabelScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DnsSettings2DomainNameLabelScope? DomainNameLabelScope { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains the IP tag associated with the public IP address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IpTags
    {
        /// <summary>
        /// IP tag type. Example: FirstPartyUsage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipTagType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpTagType { get; set; }

        /// <summary>
        /// IP tag associated with the public IP. Example: SQL, Storage etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties4PublicIPAddressVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IPv4")]
        IPv4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IPv6")]
        IPv6 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties4PublicIPAllocationMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Dynamic")]
        Dynamic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Static")]
        Static = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DnsSettings2DomainNameLabelScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TenantReuse")]
        TenantReuse = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SubscriptionReuse")]
        SubscriptionReuse = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ResourceGroupReuse")]
        ResourceGroupReuse = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NoReuse")]
        NoReuse = 3,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625