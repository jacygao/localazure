//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace SecretController
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IController
    {

        /// <summary>
        /// Sets a secret in a specified key vault.
        /// </summary>

        /// <remarks>
        /// The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
        /// </remarks>

        /// <param name="secret_name">The name of the secret. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information.</param>

        /// <param name="parameters">The parameters for setting the secret.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>A secret bundle containing the result of the set secret request.</returns>

        System.Threading.Tasks.Task<SecretBundle> SetSecretAsync(string secret_name, SecretSetParameters parameters, string api_version);

        /// <summary>
        /// Deletes a secret from a specified key vault.
        /// </summary>

        /// <remarks>
        /// The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
        /// </remarks>

        /// <param name="secret_name">The name of the secret.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The deleted secret and information on when the secret will be deleted, and how to recover the deleted secret.</returns>

        System.Threading.Tasks.Task<DeletedSecretBundle> DeleteSecretAsync(string secret_name, string api_version);

        /// <summary>
        /// Updates the attributes associated with a specified secret in a given key vault.
        /// </summary>

        /// <remarks>
        /// The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
        /// </remarks>

        /// <param name="secret_name">The name of the secret.</param>

        /// <param name="secret_version">The version of the secret.</param>

        /// <param name="parameters">The parameters for update secret operation.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The updated secret.</returns>

        System.Threading.Tasks.Task<SecretBundle> UpdateSecretAsync(string secret_name, string secret_version, SecretUpdateParameters parameters, string api_version);

        /// <summary>
        /// Get a specified secret from a given key vault.
        /// </summary>

        /// <remarks>
        /// The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
        /// </remarks>

        /// <param name="secret_name">The name of the secret.</param>

        /// <param name="secret_version">The version of the secret. This URI fragment is optional. If not specified, the latest version of the secret is returned.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The retrieved secret.</returns>

        System.Threading.Tasks.Task<SecretBundle> GetSecretAsync(string secret_name, string secret_version, string api_version);

        /// <summary>
        /// List secrets in a specified key vault.
        /// </summary>

        /// <remarks>
        /// The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
        /// </remarks>

        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>A response message containing a list of secrets in the vault along with a link to the next page of secrets.</returns>

        System.Threading.Tasks.Task<SecretListResult> GetSecretsAsync(int? maxresults, string api_version);

        /// <summary>
        /// List all versions of the specified secret.
        /// </summary>

        /// <remarks>
        /// The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
        /// </remarks>

        /// <param name="secret_name">The name of the secret.</param>

        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>A response message containing a list of secrets along with a link to the next page of secrets.</returns>

        System.Threading.Tasks.Task<SecretListResult> GetSecretVersionsAsync(string secret_name, int? maxresults, string api_version);

        /// <summary>
        /// Lists deleted secrets for the specified vault.
        /// </summary>

        /// <remarks>
        /// The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
        /// </remarks>

        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>A response message containing a list of deleted secrets in the vault, along with a link to the next page of deleted secrets.</returns>

        System.Threading.Tasks.Task<DeletedSecretListResult> GetDeletedSecretsAsync(int? maxresults, string api_version);

        /// <summary>
        /// Gets the specified deleted secret.
        /// </summary>

        /// <remarks>
        /// The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
        /// </remarks>

        /// <param name="secret_name">The name of the secret.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>A secret bundle of the secret and its attributes.</returns>

        System.Threading.Tasks.Task<DeletedSecretBundle> GetDeletedSecretAsync(string secret_name, string api_version);

        /// <summary>
        /// Permanently deletes the specified secret.
        /// </summary>

        /// <remarks>
        /// The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
        /// </remarks>

        /// <param name="secret_name">The name of the secret.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>No content signaling that the secret was purged forever.</returns>

        System.Threading.Tasks.Task PurgeDeletedSecretAsync(string secret_name, string api_version);

        /// <summary>
        /// Recovers the deleted secret to the latest version.
        /// </summary>

        /// <remarks>
        /// Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
        /// </remarks>

        /// <param name="secret_name">The name of the deleted secret.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>A Secret bundle of the original secret and its attributes.</returns>

        System.Threading.Tasks.Task<SecretBundle> RecoverDeletedSecretAsync(string secret_name, string api_version);

        /// <summary>
        /// Backs up the specified secret.
        /// </summary>

        /// <remarks>
        /// Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
        /// </remarks>

        /// <param name="secret_name">The name of the secret.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>The backup blob containing the backed up secret.</returns>

        System.Threading.Tasks.Task<BackupSecretResult> BackupSecretAsync(string secret_name, string api_version);

        /// <summary>
        /// Restores a backed up secret to a vault.
        /// </summary>

        /// <remarks>
        /// Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
        /// </remarks>

        /// <param name="parameters">The parameters to restore the secret.</param>

        /// <param name="api_version">Client API version.</param>

        /// <returns>Restored secret bundle in the vault.</returns>

        System.Threading.Tasks.Task<SecretBundle> RestoreSecretAsync(SecretRestoreParameters parameters, string api_version);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class Controller : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IController _implementation;

        public Controller(IController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Sets a secret in a specified key vault.
        /// </summary>
        /// <remarks>
        /// The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the secrets/set permission.
        /// </remarks>
        /// <param name="secret_name">The name of the secret. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information.</param>
        /// <param name="parameters">The parameters for setting the secret.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>A secret bundle containing the result of the set secret request.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("secrets/{secret-name}")]
        public System.Threading.Tasks.Task<SecretBundle> SetSecret(string secret_name, [Microsoft.AspNetCore.Mvc.FromBody] SecretSetParameters parameters, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.SetSecretAsync(secret_name, parameters, api_version);
        }

        /// <summary>
        /// Deletes a secret from a specified key vault.
        /// </summary>
        /// <remarks>
        /// The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an individual version of a secret. This operation requires the secrets/delete permission.
        /// </remarks>
        /// <param name="secret_name">The name of the secret.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The deleted secret and information on when the secret will be deleted, and how to recover the deleted secret.</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("secrets/{secret-name}")]
        public System.Threading.Tasks.Task<DeletedSecretBundle> DeleteSecret(string secret_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.DeleteSecretAsync(secret_name, api_version);
        }

        /// <summary>
        /// Updates the attributes associated with a specified secret in a given key vault.
        /// </summary>
        /// <remarks>
        /// The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the secrets/set permission.
        /// </remarks>
        /// <param name="secret_name">The name of the secret.</param>
        /// <param name="secret_version">The version of the secret.</param>
        /// <param name="parameters">The parameters for update secret operation.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The updated secret.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("secrets/{secret-name}/{secret-version}")]
        public System.Threading.Tasks.Task<SecretBundle> UpdateSecret(string secret_name, string secret_version, [Microsoft.AspNetCore.Mvc.FromBody] SecretUpdateParameters parameters, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.UpdateSecretAsync(secret_name, secret_version, parameters, api_version);
        }

        /// <summary>
        /// Get a specified secret from a given key vault.
        /// </summary>
        /// <remarks>
        /// The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission.
        /// </remarks>
        /// <param name="secret_name">The name of the secret.</param>
        /// <param name="secret_version">The version of the secret. This URI fragment is optional. If not specified, the latest version of the secret is returned.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The retrieved secret.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("secrets/{secret-name}/{secret-version}")]
        public System.Threading.Tasks.Task<SecretBundle> GetSecret(string secret_name, string secret_version, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetSecretAsync(secret_name, secret_version, api_version);
        }

        /// <summary>
        /// List secrets in a specified key vault.
        /// </summary>
        /// <remarks>
        /// The Get Secrets operation is applicable to the entire vault. However, only the base secret identifier and its attributes are provided in the response. Individual secret versions are not listed in the response. This operation requires the secrets/list permission.
        /// </remarks>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>A response message containing a list of secrets in the vault along with a link to the next page of secrets.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("secrets")]
        public System.Threading.Tasks.Task<SecretListResult> GetSecrets([Microsoft.AspNetCore.Mvc.FromQuery] int? maxresults, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetSecretsAsync(maxresults, api_version);
        }

        /// <summary>
        /// List all versions of the specified secret.
        /// </summary>
        /// <remarks>
        /// The full secret identifier and attributes are provided in the response. No values are returned for the secrets. This operations requires the secrets/list permission.
        /// </remarks>
        /// <param name="secret_name">The name of the secret.</param>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified, the service will return up to 25 results.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>A response message containing a list of secrets along with a link to the next page of secrets.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("secrets/{secret-name}/versions")]
        public System.Threading.Tasks.Task<SecretListResult> GetSecretVersions(string secret_name, [Microsoft.AspNetCore.Mvc.FromQuery] int? maxresults, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetSecretVersionsAsync(secret_name, maxresults, api_version);
        }

        /// <summary>
        /// Lists deleted secrets for the specified vault.
        /// </summary>
        /// <remarks>
        /// The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the secrets/list permission.
        /// </remarks>
        /// <param name="maxresults">Maximum number of results to return in a page. If not specified the service will return up to 25 results.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>A response message containing a list of deleted secrets in the vault, along with a link to the next page of deleted secrets.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("deletedsecrets")]
        public System.Threading.Tasks.Task<DeletedSecretListResult> GetDeletedSecrets([Microsoft.AspNetCore.Mvc.FromQuery] int? maxresults, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetDeletedSecretsAsync(maxresults, api_version);
        }

        /// <summary>
        /// Gets the specified deleted secret.
        /// </summary>
        /// <remarks>
        /// The Get Deleted Secret operation returns the specified deleted secret along with its attributes. This operation requires the secrets/get permission.
        /// </remarks>
        /// <param name="secret_name">The name of the secret.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>A secret bundle of the secret and its attributes.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("deletedsecrets/{secret-name}")]
        public System.Threading.Tasks.Task<DeletedSecretBundle> GetDeletedSecret(string secret_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetDeletedSecretAsync(secret_name, api_version);
        }

        /// <summary>
        /// Permanently deletes the specified secret.
        /// </summary>
        /// <remarks>
        /// The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the secrets/purge permission.
        /// </remarks>
        /// <param name="secret_name">The name of the secret.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>No content signaling that the secret was purged forever.</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("deletedsecrets/{secret-name}")]
        public System.Threading.Tasks.Task PurgeDeletedSecret(string secret_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.PurgeDeletedSecretAsync(secret_name, api_version);
        }

        /// <summary>
        /// Recovers the deleted secret to the latest version.
        /// </summary>
        /// <remarks>
        /// Recovers the deleted secret in the specified vault. This operation can only be performed on a soft-delete enabled vault. This operation requires the secrets/recover permission.
        /// </remarks>
        /// <param name="secret_name">The name of the deleted secret.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>A Secret bundle of the original secret and its attributes.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("deletedsecrets/{secret-name}/recover")]
        public System.Threading.Tasks.Task<SecretBundle> RecoverDeletedSecret(string secret_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.RecoverDeletedSecretAsync(secret_name, api_version);
        }

        /// <summary>
        /// Backs up the specified secret.
        /// </summary>
        /// <remarks>
        /// Requests that a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the secrets/backup permission.
        /// </remarks>
        /// <param name="secret_name">The name of the secret.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>The backup blob containing the backed up secret.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("secrets/{secret-name}/backup")]
        public System.Threading.Tasks.Task<BackupSecretResult> BackupSecret(string secret_name, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.BackupSecretAsync(secret_name, api_version);
        }

        /// <summary>
        /// Restores a backed up secret to a vault.
        /// </summary>
        /// <remarks>
        /// Restores a backed up secret, and all its versions, to a vault. This operation requires the secrets/restore permission.
        /// </remarks>
        /// <param name="parameters">The parameters to restore the secret.</param>
        /// <param name="api_version">Client API version.</param>
        /// <returns>Restored secret bundle in the vault.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("secrets/restore")]
        public System.Threading.Tasks.Task<SecretBundle> RestoreSecret([Microsoft.AspNetCore.Mvc.FromBody] SecretRestoreParameters parameters, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.RestoreSecretAsync(parameters, api_version);
        }

    }

    /// <summary>
    /// A secret consisting of a value, id and its attributes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecretBundle
    {
        /// <summary>
        /// The secret value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// The secret id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The content type of the secret.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        /// <summary>
        /// The secret management attributes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SecretAttributes Attributes { get; set; }

        /// <summary>
        /// Application specific metadata in the form of key-value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// If this is a secret backing a KV certificate, then this field specifies the corresponding key backing the KV certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kid { get; set; }

        /// <summary>
        /// True if the secret's lifetime is managed by key vault. If this is a secret backing a certificate, then managed will be true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("managed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Managed { get; set; }

    }

    /// <summary>
    /// The secret item containing secret metadata.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecretItem
    {
        /// <summary>
        /// Secret identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The secret management attributes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SecretAttributes Attributes { get; set; }

        /// <summary>
        /// Application specific metadata in the form of key-value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Type of the secret value such as a password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        /// <summary>
        /// True if the secret's lifetime is managed by key vault. If this is a key backing a certificate, then managed will be true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("managed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Managed { get; set; }

    }

    /// <summary>
    /// A Deleted Secret consisting of its previous id, attributes and its tags, as well as information on when it will be purged.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeletedSecretBundle : SecretBundle
    {
        /// <summary>
        /// The url of the recovery object, used to identify and recover the deleted secret.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recoveryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecoveryId { get; set; }

        /// <summary>
        /// The time when the secret is scheduled to be purged, in UTC
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledPurgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ScheduledPurgeDate { get; set; }

        /// <summary>
        /// The time when the secret was deleted, in UTC
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeletedDate { get; set; }

    }

    /// <summary>
    /// The deleted secret item containing metadata about the deleted secret.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeletedSecretItem : SecretItem
    {
        /// <summary>
        /// The url of the recovery object, used to identify and recover the deleted secret.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recoveryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecoveryId { get; set; }

        /// <summary>
        /// The time when the secret is scheduled to be purged, in UTC
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledPurgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ScheduledPurgeDate { get; set; }

        /// <summary>
        /// The time when the secret was deleted, in UTC
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeletedDate { get; set; }

    }

    /// <summary>
    /// The secret management attributes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecretAttributes : Attributes
    {
        /// <summary>
        /// softDelete data retention days. Value should be &gt;=7 and &lt;=90 when softDelete enabled, otherwise 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recoverableDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RecoverableDays { get; set; }

        /// <summary>
        /// Reflects the deletion recovery level currently in effect for secrets in the current vault. If it contains 'Purgeable', the secret can be permanently deleted by a privileged user; otherwise, only the system can purge the secret, at the end of the retention interval.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recoveryLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SecretAttributesRecoveryLevel? RecoveryLevel { get; set; }

    }

    /// <summary>
    /// The secret restore parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecretRestoreParameters
    {
        /// <summary>
        /// The backup blob associated with a secret bundle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Properties of the key backing a certificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecretProperties
    {
        /// <summary>
        /// The media type (MIME type).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

    }

    /// <summary>
    /// The secret set parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecretSetParameters
    {
        /// <summary>
        /// The value of the secret.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        /// <summary>
        /// Application specific metadata in the form of key-value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Type of the secret value such as a password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        /// <summary>
        /// The secret management attributes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SecretAttributes Attributes { get; set; }

    }

    /// <summary>
    /// The secret update parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecretUpdateParameters
    {
        /// <summary>
        /// Type of the secret value such as a password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        /// <summary>
        /// The secret management attributes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SecretAttributes Attributes { get; set; }

        /// <summary>
        /// Application specific metadata in the form of key-value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

    }

    /// <summary>
    /// The secret list result.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecretListResult
    {
        /// <summary>
        /// A response message containing a list of secrets in the key vault along with a link to the next page of secrets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SecretItem> Value { get; set; }

        /// <summary>
        /// The URL to get the next set of secrets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// The deleted secret list result
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeletedSecretListResult
    {
        /// <summary>
        /// A response message containing a list of the deleted secrets in the vault along with a link to the next page of deleted secrets
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DeletedSecretItem> Value { get; set; }

        /// <summary>
        /// The URL to get the next set of deleted secrets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// The backup secret result, containing the backup blob.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BackupSecretResult
    {
        /// <summary>
        /// The backup blob containing the backed up secret.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// The key vault error exception.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyVaultError
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The object attributes managed by the KeyVault service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attributes
    {
        /// <summary>
        /// Determines whether the object is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Not before date in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nbf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nbf { get; set; }

        /// <summary>
        /// Expiry date in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Exp { get; set; }

        /// <summary>
        /// Creation time in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Created { get; set; }

        /// <summary>
        /// Last updated time in UTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Updated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SecretAttributesRecoveryLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Purgeable")]
        Purgeable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Recoverable+Purgeable")]
        Recoverable_Purgeable = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Recoverable")]
        Recoverable = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Recoverable+ProtectedSubscription")]
        Recoverable_ProtectedSubscription = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomizedRecoverable+Purgeable")]
        CustomizedRecoverable_Purgeable = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomizedRecoverable")]
        CustomizedRecoverable = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomizedRecoverable+ProtectedSubscription")]
        CustomizedRecoverable_ProtectedSubscription = 6,

    }

    /// <summary>
    /// The key vault server error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// The error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// The error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("innererror", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error Innererror { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625